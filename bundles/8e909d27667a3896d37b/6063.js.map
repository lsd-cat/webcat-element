{"version":3,"file":"bundles/8e909d27667a3896d37b/6063.js","mappings":"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","sources":["webpack://element-web/./node_modules/matrix-js-sdk/src/@types/event.ts","webpack://element-web/./node_modules/matrix-js-sdk/src/@types/location.ts","webpack://element-web/./node_modules/matrix-js-sdk/src/@types/read_receipts.ts","webpack://element-web/./node_modules/matrix-js-sdk/src/@types/sync.ts","webpack://element-web/./node_modules/matrix-js-sdk/src/NamespacedValue.ts","webpack://element-web/./node_modules/matrix-js-sdk/src/store/indexeddb-store-worker.ts","webpack://element-web/./node_modules/matrix-js-sdk/src/logger.ts","webpack://element-web/./node_modules/matrix-js-sdk/src/receipt-accumulator.ts","webpack://element-web/./node_modules/matrix-js-sdk/src/sync-accumulator.ts","webpack://element-web/./node_modules/matrix-js-sdk/src/utils.ts","webpack://element-web/./node_modules/loglevel/lib/loglevel.js","webpack://element-web/./node_modules/p-retry/index.js","webpack://element-web/./node_modules/retry/index.js","webpack://element-web/./node_modules/retry/lib/retry.js","webpack://element-web/./node_modules/retry/lib/retry_operation.js","webpack://element-web/./node_modules/unhomoglyph/index.js","webpack://element-web/./node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack://element-web/./node_modules/@babel/runtime/helpers/esm/toPrimitive.js","webpack://element-web/./node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","webpack://element-web/./node_modules/@babel/runtime/helpers/esm/typeof.js"],"sourcesContent":["/*\nCopyright 2020 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { NamespacedValue, UnstableValue } from \"../NamespacedValue.ts\";\nimport {\n    type PolicyRuleEventContent,\n    type RoomAvatarEventContent,\n    type RoomCanonicalAliasEventContent,\n    type RoomCreateEventContent,\n    type RoomEncryptionEventContent,\n    type RoomGuestAccessEventContent,\n    type RoomHistoryVisibilityEventContent,\n    type RoomJoinRulesEventContent,\n    type RoomMemberEventContent,\n    type RoomNameEventContent,\n    type RoomPinnedEventsEventContent,\n    type RoomPowerLevelsEventContent,\n    type RoomServerAclEventContent,\n    type RoomThirdPartyInviteEventContent,\n    type RoomTombstoneEventContent,\n    type RoomTopicEventContent,\n    type SpaceChildEventContent,\n    type SpaceParentEventContent,\n} from \"./state_events.ts\";\nimport { type IGroupCallRoomMemberState, type IGroupCallRoomState } from \"../webrtc/groupCall.ts\";\nimport { type MSC3089EventContent } from \"../models/MSC3089Branch.ts\";\nimport { type M_BEACON, type M_BEACON_INFO, type MBeaconEventContent, type MBeaconInfoEventContent } from \"./beacon.ts\";\nimport { type EmptyObject } from \"./common.ts\";\nimport { type ReactionEventContent, type RoomMessageEventContent, type StickerEventContent } from \"./events.ts\";\nimport {\n    type MCallAnswer,\n    type MCallBase,\n    type MCallCandidates,\n    type MCallHangupReject,\n    type MCallInviteNegotiate,\n    type MCallReplacesEvent,\n    type MCallSelectAnswer,\n    type SDPStreamMetadata,\n    type SDPStreamMetadataKey,\n} from \"../webrtc/callEventTypes.ts\";\nimport { type EncryptionKeysEventContent, type ICallNotifyContent } from \"../matrixrtc/types.ts\";\nimport { type M_POLL_END, type M_POLL_START, type PollEndEventContent, type PollStartEventContent } from \"./polls.ts\";\nimport { type SessionMembershipData } from \"../matrixrtc/CallMembership.ts\";\nimport { type LocalNotificationSettings } from \"./local_notifications.ts\";\nimport { type IPushRules } from \"./PushRules.ts\";\nimport { type SecretInfo, type SecretStorageKeyDescription } from \"../secret-storage.ts\";\nimport { type POLICIES_ACCOUNT_EVENT_TYPE } from \"../models/invites-ignorer-types.ts\";\n\nexport enum EventType {\n    // Room state events\n    RoomCanonicalAlias = \"m.room.canonical_alias\",\n    RoomCreate = \"m.room.create\",\n    RoomJoinRules = \"m.room.join_rules\",\n    RoomMember = \"m.room.member\",\n    RoomThirdPartyInvite = \"m.room.third_party_invite\",\n    RoomPowerLevels = \"m.room.power_levels\",\n    RoomName = \"m.room.name\",\n    RoomTopic = \"m.room.topic\",\n    RoomAvatar = \"m.room.avatar\",\n    RoomPinnedEvents = \"m.room.pinned_events\",\n    RoomEncryption = \"m.room.encryption\",\n    RoomHistoryVisibility = \"m.room.history_visibility\",\n    RoomGuestAccess = \"m.room.guest_access\",\n    RoomServerAcl = \"m.room.server_acl\",\n    RoomTombstone = \"m.room.tombstone\",\n    RoomPredecessor = \"org.matrix.msc3946.room_predecessor\",\n\n    // Moderation policy lists\n    PolicyRuleUser = \"m.policy.rule.user\",\n    PolicyRuleRoom = \"m.policy.rule.room\",\n    PolicyRuleServer = \"m.policy.rule.server\",\n\n    SpaceChild = \"m.space.child\",\n    SpaceParent = \"m.space.parent\",\n\n    // Room timeline events\n    RoomRedaction = \"m.room.redaction\",\n    RoomMessage = \"m.room.message\",\n    RoomMessageEncrypted = \"m.room.encrypted\",\n    Sticker = \"m.sticker\",\n    CallInvite = \"m.call.invite\",\n    CallCandidates = \"m.call.candidates\",\n    CallAnswer = \"m.call.answer\",\n    CallHangup = \"m.call.hangup\",\n    CallReject = \"m.call.reject\",\n    CallSelectAnswer = \"m.call.select_answer\",\n    CallNegotiate = \"m.call.negotiate\",\n    CallSDPStreamMetadataChanged = \"m.call.sdp_stream_metadata_changed\",\n    CallSDPStreamMetadataChangedPrefix = \"org.matrix.call.sdp_stream_metadata_changed\",\n    CallReplaces = \"m.call.replaces\",\n    CallAssertedIdentity = \"m.call.asserted_identity\",\n    CallAssertedIdentityPrefix = \"org.matrix.call.asserted_identity\",\n    CallEncryptionKeysPrefix = \"io.element.call.encryption_keys\",\n    KeyVerificationRequest = \"m.key.verification.request\",\n    KeyVerificationStart = \"m.key.verification.start\",\n    KeyVerificationCancel = \"m.key.verification.cancel\",\n    KeyVerificationMac = \"m.key.verification.mac\",\n    KeyVerificationDone = \"m.key.verification.done\",\n    KeyVerificationKey = \"m.key.verification.key\",\n    KeyVerificationAccept = \"m.key.verification.accept\",\n    // Not used directly - see READY_TYPE in VerificationRequest.\n    KeyVerificationReady = \"m.key.verification.ready\",\n    // use of this is discouraged https://matrix.org/docs/spec/client_server/r0.6.1#m-room-message-feedback\n    RoomMessageFeedback = \"m.room.message.feedback\",\n    Reaction = \"m.reaction\",\n    PollStart = \"org.matrix.msc3381.poll.start\",\n\n    // Room ephemeral events\n    Typing = \"m.typing\",\n    Receipt = \"m.receipt\",\n    Presence = \"m.presence\",\n\n    // Room account_data events\n    FullyRead = \"m.fully_read\",\n    Tag = \"m.tag\",\n    SpaceOrder = \"org.matrix.msc3230.space_order\", // MSC3230\n\n    // User account_data events\n    PushRules = \"m.push_rules\",\n    Direct = \"m.direct\",\n    IgnoredUserList = \"m.ignored_user_list\",\n\n    // to_device events\n    RoomKey = \"m.room_key\",\n    RoomKeyRequest = \"m.room_key_request\",\n    ForwardedRoomKey = \"m.forwarded_room_key\",\n    Dummy = \"m.dummy\",\n\n    // Group call events\n    GroupCallPrefix = \"org.matrix.msc3401.call\",\n    GroupCallMemberPrefix = \"org.matrix.msc3401.call.member\",\n\n    // MatrixRTC events\n    CallNotify = \"org.matrix.msc4075.call.notify\",\n}\n\nexport enum RelationType {\n    Annotation = \"m.annotation\",\n    Replace = \"m.replace\",\n    Reference = \"m.reference\",\n\n    // Don't use this yet: it's only the stable version. The code still assumes we support the unstable prefix and,\n    // moreover, our tests currently use the unstable prefix. Use THREAD_RELATION_TYPE.name.\n    // Once we support *only* the stable prefix, THREAD_RELATION_TYPE can die and we can switch to this.\n    Thread = \"m.thread\",\n}\n\nexport enum MsgType {\n    Text = \"m.text\",\n    Emote = \"m.emote\",\n    Notice = \"m.notice\",\n    Image = \"m.image\",\n    File = \"m.file\",\n    Audio = \"m.audio\",\n    Location = \"m.location\",\n    Video = \"m.video\",\n    KeyVerificationRequest = \"m.key.verification.request\",\n}\n\nexport const RoomCreateTypeField = \"type\";\n\nexport enum RoomType {\n    Space = \"m.space\",\n    UnstableCall = \"org.matrix.msc3417.call\",\n    ElementVideo = \"io.element.video\",\n}\n\nexport const ToDeviceMessageId = \"org.matrix.msgid\";\n\n/**\n * Identifier for an [MSC3088](https://github.com/matrix-org/matrix-doc/pull/3088)\n * room purpose. Note that this reference is UNSTABLE and subject to breaking changes,\n * including its eventual removal.\n */\nexport const UNSTABLE_MSC3088_PURPOSE = new UnstableValue(\"m.room.purpose\", \"org.matrix.msc3088.purpose\");\n\n/**\n * Enabled flag for an [MSC3088](https://github.com/matrix-org/matrix-doc/pull/3088)\n * room purpose. Note that this reference is UNSTABLE and subject to breaking changes,\n * including its eventual removal.\n */\nexport const UNSTABLE_MSC3088_ENABLED = new UnstableValue(\"m.enabled\", \"org.matrix.msc3088.enabled\");\n\n/**\n * Subtype for an [MSC3089](https://github.com/matrix-org/matrix-doc/pull/3089) space-room.\n * Note that this reference is UNSTABLE and subject to breaking changes, including its\n * eventual removal.\n */\nexport const UNSTABLE_MSC3089_TREE_SUBTYPE = new UnstableValue(\"m.data_tree\", \"org.matrix.msc3089.data_tree\");\n\n/**\n * Leaf type for an event in a [MSC3089](https://github.com/matrix-org/matrix-doc/pull/3089) space-room.\n * Note that this reference is UNSTABLE and subject to breaking changes, including its\n * eventual removal.\n */\nexport const UNSTABLE_MSC3089_LEAF = new UnstableValue(\"m.leaf\", \"org.matrix.msc3089.leaf\");\n\n/**\n * Branch (Leaf Reference) type for the index approach in a\n * [MSC3089](https://github.com/matrix-org/matrix-doc/pull/3089) space-room. Note that this reference is\n * UNSTABLE and subject to breaking changes, including its eventual removal.\n */\nexport const UNSTABLE_MSC3089_BRANCH = new UnstableValue(\"m.branch\", \"org.matrix.msc3089.branch\");\n\n/**\n * Marker event type to point back at imported historical content in a room. See\n * [MSC2716](https://github.com/matrix-org/matrix-spec-proposals/pull/2716).\n * Note that this reference is UNSTABLE and subject to breaking changes,\n * including its eventual removal.\n */\nexport const UNSTABLE_MSC2716_MARKER = new UnstableValue(\"m.room.marker\", \"org.matrix.msc2716.marker\");\n\n/**\n * Name of the request property for relation based redactions.\n * {@link https://github.com/matrix-org/matrix-spec-proposals/pull/3912}\n */\nexport const MSC3912_RELATION_BASED_REDACTIONS_PROP = new UnstableValue(\n    \"with_rel_types\",\n    \"org.matrix.msc3912.with_relations\",\n);\n\n/**\n * Functional members type for declaring a purpose of room members (e.g. helpful bots).\n * Note that this reference is UNSTABLE and subject to breaking changes, including its\n * eventual removal.\n *\n * Schema (TypeScript):\n * ```\n * {\n *   service_members?: string[]\n * }\n * ```\n *\n * @example\n * ```\n * {\n *   \"service_members\": [\n *     \"@helperbot:localhost\",\n *     \"@reminderbot:alice.tdl\"\n *   ]\n * }\n * ```\n */\nexport const UNSTABLE_ELEMENT_FUNCTIONAL_USERS = new UnstableValue(\n    \"io.element.functional_members\",\n    \"io.element.functional_members\",\n);\n\n/**\n * A type of message that affects visibility of a message,\n * as per https://github.com/matrix-org/matrix-doc/pull/3531\n *\n * @experimental\n */\nexport const EVENT_VISIBILITY_CHANGE_TYPE = new UnstableValue(\"m.visibility\", \"org.matrix.msc3531.visibility\");\n\n/**\n * https://github.com/matrix-org/matrix-doc/pull/3881\n *\n * @experimental\n */\nexport const PUSHER_ENABLED = new UnstableValue(\"enabled\", \"org.matrix.msc3881.enabled\");\n\n/**\n * https://github.com/matrix-org/matrix-doc/pull/3881\n *\n * @experimental\n */\nexport const PUSHER_DEVICE_ID = new UnstableValue(\"device_id\", \"org.matrix.msc3881.device_id\");\n\n/**\n * https://github.com/matrix-org/matrix-doc/pull/3890\n *\n * @experimental\n */\nexport const LOCAL_NOTIFICATION_SETTINGS_PREFIX = new UnstableValue(\n    \"m.local_notification_settings\",\n    \"org.matrix.msc3890.local_notification_settings\",\n);\n\n/**\n * https://github.com/matrix-org/matrix-doc/pull/4023\n *\n * @experimental\n */\nexport const UNSIGNED_THREAD_ID_FIELD = new UnstableValue(\"thread_id\", \"org.matrix.msc4023.thread_id\");\n\n/**\n * https://github.com/matrix-org/matrix-spec-proposals/pull/4115\n *\n * @experimental\n */\nexport const UNSIGNED_MEMBERSHIP_FIELD = new NamespacedValue(\"membership\", \"io.element.msc4115.membership\");\n\n/**\n * Mapped type from event type to content type for all specified non-state room events.\n */\nexport interface TimelineEvents {\n    [EventType.RoomMessage]: RoomMessageEventContent;\n    [EventType.Sticker]: StickerEventContent;\n    [EventType.Reaction]: ReactionEventContent;\n    [EventType.CallReplaces]: MCallReplacesEvent;\n    [EventType.CallAnswer]: MCallAnswer;\n    [EventType.CallSelectAnswer]: MCallSelectAnswer;\n    [EventType.CallNegotiate]: Omit<MCallInviteNegotiate, \"offer\">;\n    [EventType.CallInvite]: MCallInviteNegotiate;\n    [EventType.CallCandidates]: MCallCandidates;\n    [EventType.CallHangup]: MCallHangupReject;\n    [EventType.CallReject]: MCallHangupReject;\n    [EventType.CallSDPStreamMetadataChangedPrefix]: MCallBase & { [SDPStreamMetadataKey]: SDPStreamMetadata };\n    [EventType.CallEncryptionKeysPrefix]: EncryptionKeysEventContent;\n    [EventType.CallNotify]: ICallNotifyContent;\n    [M_BEACON.name]: MBeaconEventContent;\n    [M_POLL_START.name]: PollStartEventContent;\n    [M_POLL_END.name]: PollEndEventContent;\n}\n\n/**\n * Mapped type from event type to content type for all specified room state events.\n */\nexport interface StateEvents {\n    [EventType.RoomCanonicalAlias]: RoomCanonicalAliasEventContent;\n    [EventType.RoomCreate]: RoomCreateEventContent;\n    [EventType.RoomJoinRules]: RoomJoinRulesEventContent;\n    [EventType.RoomMember]: RoomMemberEventContent;\n    // XXX: Spec says this event has 3 required fields but kicking such an invitation requires sending `{}`\n    [EventType.RoomThirdPartyInvite]: RoomThirdPartyInviteEventContent | EmptyObject;\n    [EventType.RoomPowerLevels]: RoomPowerLevelsEventContent;\n    [EventType.RoomName]: RoomNameEventContent;\n    [EventType.RoomTopic]: RoomTopicEventContent;\n    [EventType.RoomAvatar]: RoomAvatarEventContent;\n    [EventType.RoomPinnedEvents]: RoomPinnedEventsEventContent;\n    [EventType.RoomEncryption]: RoomEncryptionEventContent;\n    [EventType.RoomHistoryVisibility]: RoomHistoryVisibilityEventContent;\n    [EventType.RoomGuestAccess]: RoomGuestAccessEventContent;\n    [EventType.RoomServerAcl]: RoomServerAclEventContent;\n    [EventType.RoomTombstone]: RoomTombstoneEventContent;\n    [EventType.SpaceChild]: SpaceChildEventContent;\n    [EventType.SpaceParent]: SpaceParentEventContent;\n\n    [EventType.PolicyRuleUser]: PolicyRuleEventContent | EmptyObject;\n    [EventType.PolicyRuleRoom]: PolicyRuleEventContent | EmptyObject;\n    [EventType.PolicyRuleServer]: PolicyRuleEventContent | EmptyObject;\n\n    // MSC3401\n    [EventType.GroupCallPrefix]: IGroupCallRoomState;\n    [EventType.GroupCallMemberPrefix]: IGroupCallRoomMemberState | SessionMembershipData | EmptyObject;\n\n    // MSC3089\n    [UNSTABLE_MSC3089_BRANCH.name]: MSC3089EventContent;\n\n    // MSC3672\n    [M_BEACON_INFO.name]: MBeaconInfoEventContent;\n}\n\n/**\n * Mapped type from event type to content type for all specified global account_data events.\n */\nexport interface AccountDataEvents extends SecretStorageAccountDataEvents {\n    [EventType.PushRules]: IPushRules;\n    [EventType.Direct]: { [userId: string]: string[] };\n    [EventType.IgnoredUserList]: { ignored_users: { [userId: string]: EmptyObject } };\n    \"m.secret_storage.default_key\": { key: string };\n    // Flag set by the rust SDK (Element X) and also used by us to mark that the user opted out of backup\n    // (I don't know why it's m.org.matrix...)\n    \"m.org.matrix.custom.backup_disabled\": { disabled: boolean };\n    \"m.identity_server\": { base_url: string | null };\n    [key: `${typeof LOCAL_NOTIFICATION_SETTINGS_PREFIX.name}.${string}`]: LocalNotificationSettings;\n    [key: `m.secret_storage.key.${string}`]: SecretStorageKeyDescription;\n\n    // Invites-ignorer events\n    [POLICIES_ACCOUNT_EVENT_TYPE.name]: { [key: string]: any };\n    [POLICIES_ACCOUNT_EVENT_TYPE.altName]: { [key: string]: any };\n}\n\n/**\n * Mapped type from event type to content type for all specified global events encrypted by secret storage.\n *\n * See https://spec.matrix.org/v1.13/client-server-api/#msecret_storagev1aes-hmac-sha2-1\n */\nexport interface SecretStorageAccountDataEvents {\n    \"m.megolm_backup.v1\": SecretInfo;\n    \"m.cross_signing.master\": SecretInfo;\n    \"m.cross_signing.self_signing\": SecretInfo;\n    \"m.cross_signing.user_signing\": SecretInfo;\n    \"org.matrix.msc3814\": SecretInfo;\n}\n","/*\nCopyright 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n// Types for MSC3488 - m.location: Extending events with location data\nimport { type EitherAnd } from \"matrix-events-sdk\";\n\nimport { UnstableValue } from \"../NamespacedValue.ts\";\nimport { type M_TEXT } from \"./extensible_events.ts\";\n\nexport enum LocationAssetType {\n    Self = \"m.self\",\n    Pin = \"m.pin\",\n}\n\nexport const M_ASSET = new UnstableValue(\"m.asset\", \"org.matrix.msc3488.asset\");\nexport type MAssetContent = { type: LocationAssetType };\n/**\n * The event definition for an m.asset event (in content)\n */\nexport type MAssetEvent = EitherAnd<{ [M_ASSET.name]: MAssetContent }, { [M_ASSET.altName]: MAssetContent }>;\n\nexport const M_TIMESTAMP = new UnstableValue(\"m.ts\", \"org.matrix.msc3488.ts\");\n/**\n * The event definition for an m.ts event (in content)\n */\nexport type MTimestampEvent = EitherAnd<{ [M_TIMESTAMP.name]: number }, { [M_TIMESTAMP.altName]: number }>;\n\nexport const M_LOCATION = new UnstableValue(\"m.location\", \"org.matrix.msc3488.location\");\n\nexport type MLocationContent = {\n    uri: string;\n    description?: string | null;\n};\n\nexport type MLocationEvent = EitherAnd<\n    { [M_LOCATION.name]: MLocationContent },\n    { [M_LOCATION.altName]: MLocationContent }\n>;\n\nexport type MTextEvent = EitherAnd<{ [M_TEXT.name]: string }, { [M_TEXT.altName]: string }>;\n\n/* From the spec at:\n * https://github.com/matrix-org/matrix-doc/blob/matthew/location/proposals/3488-location.md\n{\n    \"type\": \"m.room.message\",\n    \"content\": {\n        \"body\": \"Matthew was at geo:51.5008,0.1247;u=35 as of Sat Nov 13 18:50:58 2021\",\n        \"msgtype\": \"m.location\",\n        \"geo_uri\": \"geo:51.5008,0.1247;u=35\",\n        \"m.location\": {\n            \"uri\": \"geo:51.5008,0.1247;u=35\",\n            \"description\": \"Matthew's whereabouts\",\n        },\n        \"m.asset\": {\n            \"type\": \"m.self\"\n        },\n        \"m.text\": \"Matthew was at geo:51.5008,0.1247;u=35 as of Sat Nov 13 18:50:58 2021\",\n        \"m.ts\": 1636829458432,\n    }\n}\n*/\ntype OptionalTimestampEvent = MTimestampEvent | undefined;\n/**\n * The content for an m.location event\n */\nexport type MLocationEventContent = MLocationEvent & MAssetEvent & MTextEvent & OptionalTimestampEvent;\n\nexport type LegacyLocationEventContent = {\n    body: string;\n    msgtype: string;\n    geo_uri: string;\n};\n\n/**\n * Possible content for location events as sent over the wire\n */\nexport type LocationEventWireContent = Partial<LegacyLocationEventContent & MLocationEventContent>;\n\nexport type ILocationContent = MLocationEventContent & LegacyLocationEventContent;\n","/*\nCopyright 2022 Šimon Brandner <simon.bra.ag@gmail.com>\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nexport enum ReceiptType {\n    Read = \"m.read\",\n    FullyRead = \"m.fully_read\",\n    ReadPrivate = \"m.read.private\",\n}\n\nexport const MAIN_ROOM_TIMELINE = \"main\";\n\nexport interface Receipt {\n    ts: number;\n    thread_id?: string;\n}\n\nexport interface WrappedReceipt {\n    eventId: string;\n    data: Receipt;\n}\n\nexport interface CachedReceipt {\n    type: ReceiptType;\n    userId: string;\n    data: Receipt;\n}\n\nexport type ReceiptCache = Map<string, CachedReceipt[]>;\n\nexport interface ReceiptContent {\n    [eventId: string]: {\n        [key in ReceiptType | string]: {\n            [userId: string]: Receipt;\n        };\n    };\n}\n\n// We will only hold a synthetic receipt if we do not have a real receipt or the synthetic is newer.\n// map: receipt type → user Id → receipt\nexport type Receipts = Map<string, Map<string, [real: WrappedReceipt | null, synthetic: WrappedReceipt | null]>>;\n\nexport type CachedReceiptStructure = {\n    eventId: string;\n    receiptType: string | ReceiptType;\n    userId: string;\n    receipt: Receipt;\n    synthetic: boolean;\n};\n","/*\nCopyright 2022 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { ServerControlledNamespacedValue } from \"../NamespacedValue.ts\";\n\n/**\n * https://github.com/matrix-org/matrix-doc/pull/3773\n *\n * @experimental\n */\nexport const UNREAD_THREAD_NOTIFICATIONS = new ServerControlledNamespacedValue(\n    \"unread_thread_notifications\",\n    \"org.matrix.msc3773.unread_thread_notifications\",\n);\n","/*\nCopyright 2021 - 2022 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { type Optional } from \"matrix-events-sdk/lib/types\";\n\n/**\n * Represents a simple Matrix namespaced value. This will assume that if a stable prefix\n * is provided that the stable prefix should be used when representing the identifier.\n */\nexport class NamespacedValue<S extends string, U extends string> {\n    // Stable is optional, but one of the two parameters is required, hence the weird-looking types.\n    // Goal is to to have developers explicitly say there is no stable value (if applicable).\n    public constructor(stable: S, unstable: U);\n    public constructor(stable: S, unstable?: U);\n    public constructor(stable: null | undefined, unstable: U);\n    public constructor(\n        public readonly stable?: S | null,\n        public readonly unstable?: U,\n    ) {\n        if (!this.unstable && !this.stable) {\n            throw new Error(\"One of stable or unstable values must be supplied\");\n        }\n    }\n\n    public get name(): U | S {\n        if (this.stable) {\n            return this.stable;\n        }\n        return this.unstable!;\n    }\n\n    public get altName(): U | S | null | undefined {\n        if (!this.stable) {\n            return null;\n        }\n        return this.unstable;\n    }\n\n    public get names(): (U | S)[] {\n        const names = [this.name];\n        const altName = this.altName;\n        if (altName) names.push(altName);\n        return names;\n    }\n\n    public matches(val: string): boolean {\n        return this.name === val || this.altName === val;\n    }\n\n    // this desperately wants https://github.com/microsoft/TypeScript/pull/26349 at the top level of the class\n    // so we can instantiate `NamespacedValue<string, _, _>` as a default type for that namespace.\n    public findIn<T>(obj: any): Optional<T> {\n        let val: T | undefined = undefined;\n        if (this.name) {\n            val = obj?.[this.name];\n        }\n        if (!val && this.altName) {\n            val = obj?.[this.altName];\n        }\n        return val;\n    }\n\n    public includedIn(arr: any[]): boolean {\n        let included = false;\n        if (this.name) {\n            included = arr.includes(this.name);\n        }\n        if (!included && this.altName) {\n            included = arr.includes(this.altName);\n        }\n        return included;\n    }\n}\n\nexport class ServerControlledNamespacedValue<S extends string, U extends string> extends NamespacedValue<S, U> {\n    private preferUnstable = false;\n\n    public setPreferUnstable(preferUnstable: boolean): void {\n        this.preferUnstable = preferUnstable;\n    }\n\n    public get name(): U | S {\n        if (this.stable && !this.preferUnstable) {\n            return this.stable;\n        }\n        return this.unstable!;\n    }\n}\n\n/**\n * Represents a namespaced value which prioritizes the unstable value over the stable\n * value.\n */\nexport class UnstableValue<S extends string, U extends string> extends NamespacedValue<S, U> {\n    // Note: Constructor difference is that `unstable` is *required*.\n    public constructor(stable: S, unstable: U) {\n        super(stable, unstable);\n        if (!this.unstable) {\n            throw new Error(\"Unstable value must be supplied\");\n        }\n    }\n\n    public get name(): U {\n        return this.unstable!;\n    }\n\n    public get altName(): S {\n        return this.stable!;\n    }\n}\n","/*\nCopyright 2017 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { LocalIndexedDBStoreBackend } from \"./indexeddb-local-backend.ts\";\nimport { logger } from \"../logger.ts\";\n\ninterface ICmd {\n    command: string;\n    seq: number;\n    args: any[];\n}\n\n/**\n * This class lives in the webworker and drives a LocalIndexedDBStoreBackend\n * controlled by messages from the main process.\n *\n * @example\n * It should be instantiated by a web worker script provided by the application\n * in a script, for example:\n * ```\n * import {IndexedDBStoreWorker} from 'matrix-js-sdk/lib/indexeddb-worker.js';\n * const remoteWorker = new IndexedDBStoreWorker(postMessage);\n * onmessage = remoteWorker.onMessage;\n * ```\n *\n * Note that it is advisable to import this class by referencing the file directly to\n * avoid a dependency on the whole js-sdk.\n *\n */\nexport class IndexedDBStoreWorker {\n    private backend?: LocalIndexedDBStoreBackend;\n\n    /**\n     * @param postMessage - The web worker postMessage function that\n     * should be used to communicate back to the main script.\n     */\n    public constructor(private readonly postMessage: InstanceType<typeof Worker>[\"postMessage\"]) {}\n\n    private onClose = (): void => {\n        this.postMessage.call(null, {\n            command: \"closed\",\n        });\n    };\n\n    /**\n     * Passes a message event from the main script into the class. This method\n     * can be directly assigned to the web worker `onmessage` variable.\n     *\n     * @param ev - The message event\n     */\n    public onMessage = (ev: MessageEvent): void => {\n        const msg: ICmd = ev.data;\n        let prom: Promise<any> | undefined;\n\n        switch (msg.command) {\n            case \"setupWorker\":\n                // this is the 'indexedDB' global (where global != window\n                // because it's a web worker and there is no window).\n                this.backend = new LocalIndexedDBStoreBackend(indexedDB, msg.args[0]);\n                prom = Promise.resolve();\n                break;\n            case \"connect\":\n                prom = this.backend?.connect(this.onClose);\n                break;\n            case \"isNewlyCreated\":\n                prom = this.backend?.isNewlyCreated();\n                break;\n            case \"clearDatabase\":\n                prom = this.backend?.clearDatabase();\n                break;\n            case \"getSavedSync\":\n                prom = this.backend?.getSavedSync(false);\n                break;\n            case \"setSyncData\":\n                prom = this.backend?.setSyncData(msg.args[0]);\n                break;\n            case \"syncToDatabase\":\n                prom = this.backend?.syncToDatabase(msg.args[0]);\n                break;\n            case \"getUserPresenceEvents\":\n                prom = this.backend?.getUserPresenceEvents();\n                break;\n            case \"getNextBatchToken\":\n                prom = this.backend?.getNextBatchToken();\n                break;\n            case \"getOutOfBandMembers\":\n                prom = this.backend?.getOutOfBandMembers(msg.args[0]);\n                break;\n            case \"clearOutOfBandMembers\":\n                prom = this.backend?.clearOutOfBandMembers(msg.args[0]);\n                break;\n            case \"setOutOfBandMembers\":\n                prom = this.backend?.setOutOfBandMembers(msg.args[0], msg.args[1]);\n                break;\n            case \"getClientOptions\":\n                prom = this.backend?.getClientOptions();\n                break;\n            case \"storeClientOptions\":\n                prom = this.backend?.storeClientOptions(msg.args[0]);\n                break;\n            case \"saveToDeviceBatches\":\n                prom = this.backend?.saveToDeviceBatches(msg.args[0]);\n                break;\n            case \"getOldestToDeviceBatch\":\n                prom = this.backend?.getOldestToDeviceBatch();\n                break;\n            case \"removeToDeviceBatch\":\n                prom = this.backend?.removeToDeviceBatch(msg.args[0]);\n                break;\n        }\n\n        if (prom === undefined) {\n            this.postMessage({\n                command: \"cmd_fail\",\n                seq: msg.seq,\n                // Can't be an Error because they're not structured cloneable\n                error: \"Unrecognised command\",\n            });\n            return;\n        }\n\n        prom.then(\n            (ret) => {\n                this.postMessage.call(null, {\n                    command: \"cmd_success\",\n                    seq: msg.seq,\n                    result: ret,\n                });\n            },\n            (err) => {\n                logger.error(\"Error running command: \" + msg.command, err);\n                this.postMessage.call(null, {\n                    command: \"cmd_fail\",\n                    seq: msg.seq,\n                    // Just send a string because Error objects aren't cloneable\n                    error: {\n                        message: err.message,\n                        name: err.name,\n                    },\n                });\n            },\n        );\n    };\n}\n","/*\nCopyright 2018 André Jaenisch\nCopyright 2019, 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport loglevel from \"loglevel\";\n\n/** Backwards-compatibility hack to expose `log` to applications that might still be relying on it. */\ninterface LoggerWithLogMethod extends Logger {\n    /**\n     * Output debug message to the logger.\n     *\n     * @param msg - Data to log.\n     *\n     * @deprecated prefer {@link Logger.debug}.\n     */\n    log(...msg: any[]): void;\n}\n\n/** Logger interface used within the js-sdk codebase */\nexport interface Logger extends BaseLogger {\n    /**\n     * Create a child logger.\n     *\n     * @param namespace - name to add to the current logger to generate the child. Some implementations of `Logger`\n     *    use this as a prefix; others use a different mechanism.\n     */\n    getChild(namespace: string): Logger;\n}\n\n/** The basic interface for a logger which doesn't support children */\nexport interface BaseLogger {\n    /**\n     * Output trace message to the logger, with stack trace.\n     *\n     * @param msg - Data to log.\n     */\n    trace(...msg: any[]): void;\n\n    /**\n     * Output debug message to the logger.\n     *\n     * @param msg - Data to log.\n     */\n    debug(...msg: any[]): void;\n\n    /**\n     * Output info message to the logger.\n     *\n     * @param msg - Data to log.\n     */\n    info(...msg: any[]): void;\n\n    /**\n     * Output warn message to the logger.\n     *\n     * @param msg - Data to log.\n     */\n    warn(...msg: any[]): void;\n\n    /**\n     * Output error message to the logger.\n     *\n     * @param msg - Data to log.\n     */\n    error(...msg: any[]): void;\n}\n\n// This is to demonstrate, that you can use any namespace you want.\n// Namespaces allow you to turn on/off the logging for specific parts of the\n// application.\n// An idea would be to control this via an environment variable (on Node.js).\n// See https://www.npmjs.com/package/debug to see how this could be implemented\n// Part of #332 is introducing a logging library in the first place.\nconst DEFAULT_NAMESPACE = \"matrix\";\n\n// because rageshakes in react-sdk hijack the console log, also at module load time,\n// initializing the logger here races with the initialization of rageshakes.\n// to avoid the issue, we override the methodFactory of loglevel that binds to the\n// console methods at initialization time by a factory that looks up the console methods\n// when logging so we always get the current value of console methods.\nloglevel.methodFactory = function (methodName, logLevel, loggerName) {\n    return function (this: PrefixedLogger, ...args): void {\n        /* eslint-disable @typescript-eslint/no-invalid-this */\n        if (this.prefix) {\n            args.unshift(this.prefix);\n        }\n        /* eslint-enable @typescript-eslint/no-invalid-this */\n        const supportedByConsole =\n            methodName === \"error\" ||\n            methodName === \"warn\" ||\n            methodName === \"trace\" ||\n            methodName === \"info\" ||\n            methodName === \"debug\";\n        /* eslint-disable no-console */\n        if (supportedByConsole) {\n            return console[methodName](...args);\n        } else {\n            return console.log(...args);\n        }\n        /* eslint-enable no-console */\n    };\n};\n\n/**\n * Implementation of {@link Logger} based on `loglevel`.\n */\ninterface PrefixedLogger extends loglevel.Logger, LoggerWithLogMethod {\n    prefix?: string;\n}\n\n/**\n * Internal utility function: gets a {@link Logger} based on `loglevel`.\n *\n * Child loggers produced by {@link Logger.getChild} add the name of the child logger as a prefix on each log line.\n *\n * @param prefix Prefix to add to each logged line. If undefined, no prefix will be added.\n */\nfunction getPrefixedLogger(prefix?: string): LoggerWithLogMethod {\n    const loggerName = DEFAULT_NAMESPACE + (prefix === undefined ? \"\" : `-${prefix}`);\n    const prefixLogger = loglevel.getLogger(loggerName) as PrefixedLogger;\n\n    if (prefixLogger.getChild === undefined) {\n        // This is a new loglevel Logger which has not been turned into a PrefixedLogger yet.\n        prefixLogger.prefix = prefix;\n        prefixLogger.getChild = (childPrefix): Logger => getPrefixedLogger((prefix ?? \"\") + childPrefix);\n        prefixLogger.setLevel(loglevel.levels.DEBUG, false);\n    }\n\n    return prefixLogger;\n}\n\n/**\n * Drop-in replacement for `console` using {@link https://www.npmjs.com/package/loglevel|loglevel}.\n * Can be tailored down to specific use cases if needed.\n */\nexport const logger = getPrefixedLogger();\n\n/**\n * A \"span\" for grouping related log lines together.\n *\n * The current implementation just adds the name at the start of each log line.\n *\n * This offers a lighter-weight alternative to 'child' loggers returned by {@link Logger#getChild}. In particular,\n * it's not possible to apply individual filters to the LogSpan such as setting the verbosity level. On the other hand,\n * no reference to the LogSpan is retained in the logging framework, so it is safe to make lots of them over the course\n * of an application's life and just drop references to them when the job is done.\n */\nexport class LogSpan implements BaseLogger {\n    private readonly name;\n\n    public constructor(\n        private readonly parent: BaseLogger,\n        name: string,\n    ) {\n        this.name = name + \":\";\n    }\n\n    public trace(...msg: any[]): void {\n        this.parent.trace(this.name, ...msg);\n    }\n\n    public debug(...msg: any[]): void {\n        this.parent.debug(this.name, ...msg);\n    }\n\n    public info(...msg: any[]): void {\n        this.parent.info(this.name, ...msg);\n    }\n\n    public warn(...msg: any[]): void {\n        this.parent.warn(this.name, ...msg);\n    }\n\n    public error(...msg: any[]): void {\n        this.parent.error(this.name, ...msg);\n    }\n}\n","/*\nCopyright 2023 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { type IMinimalEvent } from \"./sync-accumulator.ts\";\nimport { EventType } from \"./@types/event.ts\";\nimport { isSupportedReceiptType, MapWithDefault, recursiveMapToObject } from \"./utils.ts\";\nimport { type IContent } from \"./models/event.ts\";\nimport { type ReceiptContent, type ReceiptType } from \"./@types/read_receipts.ts\";\n\ninterface AccumulatedReceipt {\n    data: IMinimalEvent;\n    type: ReceiptType;\n    eventId: string;\n}\n\n/**\n * Summarises the read receipts within a room. Used by the sync accumulator.\n *\n * Given receipts for users, picks the most recently-received one and provides\n * the results in a new fake receipt event returned from\n * buildAccumulatedReceiptEvent().\n *\n * Handles unthreaded receipts and receipts in each thread separately, so the\n * returned event contains the most recently received unthreaded receipt, and\n * the most recently received receipt in each thread.\n */\nexport class ReceiptAccumulator {\n    /** user_id -\\> most-recently-received unthreaded receipt */\n    private unthreadedReadReceipts: Map<string, AccumulatedReceipt> = new Map();\n\n    /** thread_id -\\> user_id -\\> most-recently-received receipt for this thread */\n    private threadedReadReceipts: MapWithDefault<string, Map<string, AccumulatedReceipt>> = new MapWithDefault(\n        () => new Map(),\n    );\n\n    /**\n     * Provide an unthreaded receipt for this user. Overwrites any other\n     * unthreaded receipt we have for this user.\n     */\n    private setUnthreaded(userId: string, receipt: AccumulatedReceipt): void {\n        this.unthreadedReadReceipts.set(userId, receipt);\n    }\n\n    /**\n     * Provide a receipt for this user in this thread. Overwrites any other\n     * receipt we have for this user in this thread.\n     */\n    private setThreaded(threadId: string, userId: string, receipt: AccumulatedReceipt): void {\n        this.threadedReadReceipts.getOrCreate(threadId).set(userId, receipt);\n    }\n\n    /**\n     * @returns an iterator of pairs of [userId, AccumulatedReceipt] - all the\n     *          most recently-received unthreaded receipts for each user.\n     */\n    private allUnthreaded(): IterableIterator<[string, AccumulatedReceipt]> {\n        return this.unthreadedReadReceipts.entries();\n    }\n\n    /**\n     * @returns an iterator of pairs of [userId, AccumulatedReceipt] - all the\n     *          most recently-received threaded receipts for each user, in all\n     *          threads.\n     */\n    private *allThreaded(): IterableIterator<[string, AccumulatedReceipt]> {\n        for (const receiptsForThread of this.threadedReadReceipts.values()) {\n            for (const e of receiptsForThread.entries()) {\n                yield e;\n            }\n        }\n    }\n\n    /**\n     * Given a list of ephemeral events, find the receipts and store the\n     * relevant ones to be returned later from buildAccumulatedReceiptEvent().\n     */\n    public consumeEphemeralEvents(events: IMinimalEvent[] | undefined): void {\n        events?.forEach((e) => {\n            if (e.type !== EventType.Receipt || !e.content) {\n                // This means we'll drop unknown ephemeral events but that\n                // seems okay.\n                return;\n            }\n\n            // Handle m.receipt events. They clobber based on:\n            //   (user_id, receipt_type)\n            // but they are keyed in the event as:\n            //   content:{ $event_id: { $receipt_type: { $user_id: {json} }}}\n            // so store them in the former so we can accumulate receipt deltas\n            // quickly and efficiently (we expect a lot of them). Fold the\n            // receipt type into the key name since we only have 1 at the\n            // moment (m.read) and nested JSON objects are slower and more\n            // of a hassle to work with. We'll inflate this back out when\n            // getJSON() is called.\n            Object.keys(e.content).forEach((eventId) => {\n                Object.entries<ReceiptContent>(e.content[eventId]).forEach(([key, value]) => {\n                    if (!isSupportedReceiptType(key)) return;\n\n                    for (const userId of Object.keys(value)) {\n                        const data = e.content[eventId][key][userId];\n\n                        const receipt = {\n                            data: e.content[eventId][key][userId],\n                            type: key as ReceiptType,\n                            eventId,\n                        };\n\n                        // In a world that supports threads, read receipts normally have\n                        // a `thread_id` which is either the thread they belong in or\n                        // `MAIN_ROOM_TIMELINE`, so we normally use `setThreaded(...)`\n                        // here. The `MAIN_ROOM_TIMELINE` is just treated as another\n                        // thread.\n                        //\n                        // We still encounter read receipts that are \"unthreaded\"\n                        // (missing the `thread_id` property). These come from clients\n                        // that don't support threads, and from threaded clients that\n                        // are doing a \"Mark room as read\" operation. Unthreaded\n                        // receipts mark everything \"before\" them as read, in all\n                        // threads, where \"before\" means in Sync Order i.e. the order\n                        // the events were received from the homeserver in a sync.\n                        // [Note: we have some bugs where we use timestamp order instead\n                        // of Sync Order, because we don't correctly remember the Sync\n                        // Order. See #3325.]\n                        //\n                        // Calling the wrong method will cause incorrect behavior like\n                        // messages re-appearing as \"new\" when you already read them\n                        // previously.\n                        if (!data.thread_id) {\n                            this.setUnthreaded(userId, receipt);\n                        } else {\n                            this.setThreaded(data.thread_id, userId, receipt);\n                        }\n                    }\n                });\n            });\n        });\n    }\n\n    /**\n     * Build a receipt event that contains all relevant information for this\n     * room, taking the most recently received receipt for each user in an\n     * unthreaded context, and in each thread.\n     */\n    public buildAccumulatedReceiptEvent(roomId: string): IMinimalEvent | null {\n        const receiptEvent: IMinimalEvent = {\n            type: EventType.Receipt,\n            room_id: roomId,\n            content: {\n                // $event_id: { \"m.read\": { $user_id: $json } }\n            } as IContent,\n        };\n\n        const receiptEventContent: MapWithDefault<\n            string,\n            MapWithDefault<ReceiptType, Map<string, object>>\n        > = new MapWithDefault(() => new MapWithDefault(() => new Map()));\n\n        for (const [userId, receiptData] of this.allUnthreaded()) {\n            receiptEventContent\n                .getOrCreate(receiptData.eventId)\n                .getOrCreate(receiptData.type)\n                .set(userId, receiptData.data);\n        }\n\n        for (const [userId, receiptData] of this.allThreaded()) {\n            receiptEventContent\n                .getOrCreate(receiptData.eventId)\n                .getOrCreate(receiptData.type)\n                .set(userId, receiptData.data);\n        }\n\n        receiptEvent.content = recursiveMapToObject(receiptEventContent);\n\n        return receiptEventContent.size > 0 ? receiptEvent : null;\n    }\n}\n","/*\nCopyright 2017 - 2023 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * This is an internal module. See {@link SyncAccumulator} for the public class.\n */\n\nimport { logger } from \"./logger.ts\";\nimport { deepCopy } from \"./utils.ts\";\nimport { type IContent, type IUnsigned } from \"./models/event.ts\";\nimport { type IRoomSummary } from \"./models/room-summary.ts\";\nimport { type EventType } from \"./@types/event.ts\";\nimport { UNREAD_THREAD_NOTIFICATIONS } from \"./@types/sync.ts\";\nimport { ReceiptAccumulator } from \"./receipt-accumulator.ts\";\n\ninterface IOpts {\n    /**\n     * The ideal maximum number of timeline entries to keep in the sync response.\n     * This is best-effort, as clients do not always have a back-pagination token for each event,\n     * so it's possible there may be slightly *less* than this value. There will never be more.\n     * This cannot be 0 or else it makes it impossible to scroll back in a room.\n     * Default: 50.\n     */\n    maxTimelineEntries?: number;\n}\n\nexport interface IMinimalEvent {\n    content: IContent;\n    type: EventType | string;\n    room_id?: string;\n    unsigned?: IUnsigned;\n}\n\nexport interface IEphemeral {\n    events: IMinimalEvent[];\n}\n\n/* eslint-disable camelcase */\ninterface UnreadNotificationCounts {\n    highlight_count?: number;\n    notification_count?: number;\n}\n\nexport interface IRoomEvent extends IMinimalEvent {\n    event_id: string;\n    sender: string;\n    origin_server_ts: number;\n}\n\nexport interface IStateEvent extends IRoomEvent {\n    prev_content?: IContent;\n    state_key: string;\n}\n\ninterface IState {\n    events: IStateEvent[];\n}\n\nexport interface ITimeline {\n    events: Array<IRoomEvent | IStateEvent>;\n    limited?: boolean;\n    prev_batch: string | null;\n}\n\nexport interface IJoinedRoom {\n    \"summary\": IRoomSummary;\n    // One of `state` or `state_after` is required.\n    \"state\"?: IState;\n    \"org.matrix.msc4222.state_after\"?: IState; // https://github.com/matrix-org/matrix-spec-proposals/pull/4222\n    \"timeline\": ITimeline;\n    \"ephemeral\": IEphemeral;\n    \"account_data\": IAccountData;\n    \"unread_notifications\": UnreadNotificationCounts;\n    \"unread_thread_notifications\"?: Record<string, UnreadNotificationCounts>;\n    \"org.matrix.msc3773.unread_thread_notifications\"?: Record<string, UnreadNotificationCounts>;\n}\n\nexport interface IStrippedState {\n    content: IContent;\n    state_key: string;\n    type: EventType | string;\n    sender: string;\n}\n\nexport interface IInviteState {\n    events: IStrippedState[];\n}\n\nexport interface IKnockState {\n    events: IStrippedState[];\n}\n\nexport interface IInvitedRoom {\n    invite_state: IInviteState;\n}\n\nexport interface ILeftRoom {\n    // One of `state` or `state_after` is required.\n    \"state\"?: IState;\n    \"org.matrix.msc4222.state_after\"?: IState;\n    \"timeline\": ITimeline;\n    \"account_data\": IAccountData;\n}\n\nexport interface IKnockedRoom {\n    knock_state: IKnockState;\n}\n\nexport interface IRooms {\n    [Category.Join]: Record<string, IJoinedRoom>;\n    [Category.Invite]: Record<string, IInvitedRoom>;\n    [Category.Leave]: Record<string, ILeftRoom>;\n    [Category.Knock]: Record<string, IKnockedRoom>;\n}\n\ninterface IPresence {\n    events: IMinimalEvent[];\n}\n\ninterface IAccountData {\n    events: IMinimalEvent[];\n}\n\nexport interface IToDeviceEvent {\n    content: IContent;\n    sender: string;\n    type: string;\n}\n\ninterface IToDevice {\n    events: IToDeviceEvent[];\n}\n\nexport interface IDeviceLists {\n    changed?: string[];\n    left?: string[];\n}\n\nexport interface ISyncResponse {\n    \"next_batch\": string;\n    \"rooms\": IRooms;\n    \"presence\"?: IPresence;\n    \"account_data\": IAccountData;\n    \"to_device\"?: IToDevice;\n    \"device_lists\"?: IDeviceLists;\n    \"device_one_time_keys_count\"?: Record<string, number>;\n\n    \"device_unused_fallback_key_types\"?: string[];\n    \"org.matrix.msc2732.device_unused_fallback_key_types\"?: string[];\n}\n/* eslint-enable camelcase */\n\nexport enum Category {\n    Invite = \"invite\",\n    Leave = \"leave\",\n    Join = \"join\",\n    Knock = \"knock\",\n}\n\ninterface IRoom {\n    _currentState: { [eventType: string]: { [stateKey: string]: IStateEvent } };\n    _timeline: {\n        event: IRoomEvent | IStateEvent;\n        token: string | null;\n    }[];\n    _summary: Partial<IRoomSummary>;\n    _accountData: { [eventType: string]: IMinimalEvent };\n    _unreadNotifications: Partial<UnreadNotificationCounts>;\n    _unreadThreadNotifications?: Record<string, Partial<UnreadNotificationCounts>>;\n    _receipts: ReceiptAccumulator;\n}\n\nexport interface ISyncData {\n    nextBatch: string;\n    accountData: IMinimalEvent[];\n    roomsData: IRooms;\n}\n\ntype TaggedEvent = IRoomEvent & { _localTs?: number };\n\nfunction isTaggedEvent(event: IRoomEvent): event is TaggedEvent {\n    return \"_localTs\" in event && event[\"_localTs\"] !== undefined;\n}\n\n/**\n * The purpose of this class is to accumulate /sync responses such that a\n * complete \"initial\" JSON response can be returned which accurately represents\n * the sum total of the /sync responses accumulated to date. It only handles\n * room data: that is, everything under the \"rooms\" top-level key.\n *\n * This class is used when persisting room data so a complete /sync response can\n * be loaded from disk and incremental syncs can be performed on the server,\n * rather than asking the server to do an initial sync on startup.\n */\nexport class SyncAccumulator {\n    private accountData: Record<string, IMinimalEvent> = {}; // $event_type: Object\n    private inviteRooms: Record<string, IInvitedRoom> = {}; // $roomId: { ... sync 'invite' json data ... }\n    private knockRooms: Record<string, IKnockedRoom> = {}; // $roomId: { ... sync 'knock' json data ... }\n    private joinRooms: { [roomId: string]: IRoom } = {};\n    // the /sync token which corresponds to the last time rooms were\n    // accumulated. We remember this so that any caller can obtain a\n    // coherent /sync response and know at what point they should be\n    // streaming from without losing events.\n    private nextBatch: string | null = null;\n\n    public constructor(private readonly opts: IOpts = {}) {\n        this.opts.maxTimelineEntries = this.opts.maxTimelineEntries || 50;\n    }\n\n    public accumulate(syncResponse: ISyncResponse, fromDatabase = false): void {\n        this.accumulateRooms(syncResponse, fromDatabase);\n        this.accumulateAccountData(syncResponse);\n        this.nextBatch = syncResponse.next_batch;\n    }\n\n    private accumulateAccountData(syncResponse: ISyncResponse): void {\n        if (!syncResponse.account_data || !syncResponse.account_data.events) {\n            return;\n        }\n        // Clobbers based on event type.\n        syncResponse.account_data.events.forEach((e) => {\n            this.accountData[e.type] = e;\n        });\n    }\n\n    /**\n     * Accumulate incremental /sync room data.\n     * @param syncResponse - the complete /sync JSON\n     * @param fromDatabase - True if the sync response is one saved to the database\n     */\n    private accumulateRooms(syncResponse: ISyncResponse, fromDatabase = false): void {\n        if (!syncResponse.rooms) {\n            return;\n        }\n        if (syncResponse.rooms.invite) {\n            Object.keys(syncResponse.rooms.invite).forEach((roomId) => {\n                this.accumulateRoom(roomId, Category.Invite, syncResponse.rooms.invite[roomId], fromDatabase);\n            });\n        }\n        if (syncResponse.rooms.join) {\n            Object.keys(syncResponse.rooms.join).forEach((roomId) => {\n                this.accumulateRoom(roomId, Category.Join, syncResponse.rooms.join[roomId], fromDatabase);\n            });\n        }\n        if (syncResponse.rooms.leave) {\n            Object.keys(syncResponse.rooms.leave).forEach((roomId) => {\n                this.accumulateRoom(roomId, Category.Leave, syncResponse.rooms.leave[roomId], fromDatabase);\n            });\n        }\n        if (syncResponse.rooms.knock) {\n            Object.keys(syncResponse.rooms.knock).forEach((roomId) => {\n                this.accumulateRoom(roomId, Category.Knock, syncResponse.rooms.knock[roomId], fromDatabase);\n            });\n        }\n    }\n\n    private accumulateRoom(roomId: string, category: Category.Invite, data: IInvitedRoom, fromDatabase: boolean): void;\n    private accumulateRoom(roomId: string, category: Category.Join, data: IJoinedRoom, fromDatabase: boolean): void;\n    private accumulateRoom(roomId: string, category: Category.Leave, data: ILeftRoom, fromDatabase: boolean): void;\n    private accumulateRoom(roomId: string, category: Category.Knock, data: IKnockedRoom, fromDatabase: boolean): void;\n    private accumulateRoom(roomId: string, category: Category, data: any, fromDatabase = false): void {\n        // Valid /sync state transitions\n        //       +--------+ <======+            1: Accept an invite\n        //   +== | INVITE |        | (5)        2: Leave a room\n        //   |   +--------+ =====+ |            3: Join a public room previously\n        //   |(1)            (4) | |               left (handle as if new room)\n        //   V         (2)       V |            4: Reject an invite\n        // +------+ ========> +--------+         5: Invite to a room previously\n        // | JOIN |    (3)    | LEAVE* |            left (handle as if new room)\n        // +------+ <======== +--------+\n        //\n        // * equivalent to \"no state\"\n        switch (category) {\n            case Category.Invite: // (5)\n                if (this.knockRooms[roomId]) {\n                    // was previously knock, now invite, need to delete knock state\n                    delete this.knockRooms[roomId];\n                }\n                this.accumulateInviteState(roomId, data as IInvitedRoom);\n                break;\n\n            case Category.Knock:\n                this.accumulateKnockState(roomId, data as IKnockedRoom);\n                break;\n\n            case Category.Join:\n                if (this.inviteRooms[roomId]) {\n                    // (1)\n                    // was previously invite, now join. We expect /sync to give\n                    // the entire state and timeline on 'join', so delete previous\n                    // invite state\n                    delete this.inviteRooms[roomId];\n                }\n                // (3)\n                this.accumulateJoinState(roomId, data as IJoinedRoom, fromDatabase);\n                break;\n\n            case Category.Leave:\n                if (this.knockRooms[roomId]) {\n                    // delete knock state on leave\n                    delete this.knockRooms[roomId];\n                } else if (this.inviteRooms[roomId]) {\n                    // (4)\n                    delete this.inviteRooms[roomId];\n                } else {\n                    // (2)\n                    delete this.joinRooms[roomId];\n                }\n                break;\n\n            default:\n                logger.error(\"Unknown cateogory: \", category);\n        }\n    }\n\n    private accumulateInviteState(roomId: string, data: IInvitedRoom): void {\n        if (!data.invite_state || !data.invite_state.events) {\n            // no new data\n            return;\n        }\n        if (!this.inviteRooms[roomId]) {\n            this.inviteRooms[roomId] = {\n                invite_state: data.invite_state,\n            };\n            return;\n        }\n        // accumulate extra keys for invite->invite transitions\n        // clobber based on event type / state key\n        // We expect invite_state to be small, so just loop over the events\n        const currentData = this.inviteRooms[roomId];\n        data.invite_state.events.forEach((e) => {\n            let hasAdded = false;\n            for (let i = 0; i < currentData.invite_state.events.length; i++) {\n                const current = currentData.invite_state.events[i];\n                if (current.type === e.type && current.state_key == e.state_key) {\n                    currentData.invite_state.events[i] = e; // update\n                    hasAdded = true;\n                }\n            }\n            if (!hasAdded) {\n                currentData.invite_state.events.push(e);\n            }\n        });\n    }\n\n    private accumulateKnockState(roomId: string, data: IKnockedRoom): void {\n        if (!data.knock_state || !data.knock_state.events) {\n            // no new data\n            return;\n        }\n        if (!this.knockRooms[roomId]) {\n            this.knockRooms[roomId] = {\n                knock_state: data.knock_state,\n            };\n            return;\n        }\n        // accumulate extra keys\n        // clobber based on event type / state key\n        // We expect knock_state to be small, so just loop over the events\n        const currentData = this.knockRooms[roomId];\n        data.knock_state.events.forEach((e) => {\n            let hasAdded = false;\n            for (let i = 0; i < currentData.knock_state.events.length; i++) {\n                const current = currentData.knock_state.events[i];\n                if (current.type === e.type && current.state_key == e.state_key) {\n                    currentData.knock_state.events[i] = e; // update\n                    hasAdded = true;\n                }\n            }\n            if (!hasAdded) {\n                currentData.knock_state.events.push(e);\n            }\n        });\n    }\n\n    // Accumulate timeline and state events in a room.\n    private accumulateJoinState(roomId: string, data: IJoinedRoom, fromDatabase = false): void {\n        // We expect this function to be called a lot (every /sync) so we want\n        // this to be fast. /sync stores events in an array but we often want\n        // to clobber based on type/state_key. Rather than convert arrays to\n        // maps all the time, just keep private maps which contain\n        // the actual current accumulated sync state, and array-ify it when\n        // getJSON() is called.\n\n        // State resolution:\n        // The 'state' key is the delta from the previous sync (or start of time\n        // if no token was supplied), to the START of the timeline. To obtain\n        // the current state, we need to \"roll forward\" state by reading the\n        // timeline. We want to store the current state so we can drop events\n        // out the end of the timeline based on opts.maxTimelineEntries.\n        //\n        //      'state'     'timeline'     current state\n        // |-------x<======================>x\n        //          T   I   M   E\n        //\n        // When getJSON() is called, we 'roll back' the current state by the\n        // number of entries in the timeline to work out what 'state' should be.\n\n        // Back-pagination:\n        // On an initial /sync, the server provides a back-pagination token for\n        // the start of the timeline. When /sync deltas come down, they also\n        // include back-pagination tokens for the start of the timeline. This\n        // means not all events in the timeline have back-pagination tokens, as\n        // it is only the ones at the START of the timeline which have them.\n        // In order for us to have a valid timeline (and back-pagination token\n        // to match), we need to make sure that when we remove old timeline\n        // events, that we roll forward to an event which has a back-pagination\n        // token. This means we can't keep a strict sliding-window based on\n        // opts.maxTimelineEntries, and we may have a few less. We should never\n        // have more though, provided that the /sync limit is less than or equal\n        // to opts.maxTimelineEntries.\n\n        if (!this.joinRooms[roomId]) {\n            // Create truly empty objects so event types of 'hasOwnProperty' and co\n            // don't cause this code to break.\n            this.joinRooms[roomId] = {\n                _currentState: Object.create(null),\n                _timeline: [],\n                _accountData: Object.create(null),\n                _unreadNotifications: {},\n                _unreadThreadNotifications: {},\n                _summary: {},\n                _receipts: new ReceiptAccumulator(),\n            };\n        }\n        const currentData = this.joinRooms[roomId];\n\n        if (data.account_data && data.account_data.events) {\n            // clobber based on type\n            data.account_data.events.forEach((e) => {\n                currentData._accountData[e.type] = e;\n            });\n        }\n\n        // these probably clobber, spec is unclear.\n        if (data.unread_notifications) {\n            currentData._unreadNotifications = data.unread_notifications;\n        }\n        currentData._unreadThreadNotifications =\n            data[UNREAD_THREAD_NOTIFICATIONS.stable!] ?? data[UNREAD_THREAD_NOTIFICATIONS.unstable!] ?? undefined;\n\n        if (data.summary) {\n            const HEROES_KEY = \"m.heroes\";\n            const INVITED_COUNT_KEY = \"m.invited_member_count\";\n            const JOINED_COUNT_KEY = \"m.joined_member_count\";\n\n            const acc = currentData._summary;\n            const sum = data.summary;\n            acc[HEROES_KEY] = sum[HEROES_KEY] ?? acc[HEROES_KEY];\n            acc[JOINED_COUNT_KEY] = sum[JOINED_COUNT_KEY] ?? acc[JOINED_COUNT_KEY];\n            acc[INVITED_COUNT_KEY] = sum[INVITED_COUNT_KEY] ?? acc[INVITED_COUNT_KEY];\n        }\n\n        // We purposefully do not persist m.typing events.\n        // Technically you could refresh a browser before the timer on a\n        // typing event is up, so it'll look like you aren't typing when\n        // you really still are. However, the alternative is worse. If\n        // we do persist typing events, it will look like people are\n        // typing forever until someone really does start typing (which\n        // will prompt Synapse to send down an actual m.typing event to\n        // clobber the one we persisted).\n\n        // Persist the receipts\n        currentData._receipts.consumeEphemeralEvents(data.ephemeral?.events);\n\n        // if we got a limited sync, we need to remove all timeline entries or else\n        // we will have gaps in the timeline.\n        if (data.timeline && data.timeline.limited) {\n            currentData._timeline = [];\n        }\n\n        // Work out the current state. The deltas need to be applied in the order:\n        // - existing state which didn't come down /sync.\n        // - State events under the 'state' key.\n        // - State events under the 'state_after' key OR state events in the 'timeline' if 'state_after' is not present.\n        data.state?.events?.forEach((e) => {\n            setState(currentData._currentState, e);\n        });\n        data[\"org.matrix.msc4222.state_after\"]?.events?.forEach((e) => {\n            setState(currentData._currentState, e);\n        });\n        data.timeline?.events?.forEach((e, index) => {\n            if (!data[\"org.matrix.msc4222.state_after\"]) {\n                // this nops if 'e' isn't a state event\n                setState(currentData._currentState, e);\n            }\n            // append the event to the timeline. The back-pagination token\n            // corresponds to the first event in the timeline\n            let transformedEvent: TaggedEvent;\n            if (!fromDatabase) {\n                transformedEvent = Object.assign({}, e);\n                if (transformedEvent.unsigned !== undefined) {\n                    transformedEvent.unsigned = Object.assign({}, transformedEvent.unsigned);\n                }\n                const age = e.unsigned?.age;\n                if (age !== undefined) transformedEvent._localTs = Date.now() - age;\n            } else {\n                transformedEvent = e;\n            }\n\n            currentData._timeline.push({\n                event: transformedEvent,\n                token: index === 0 ? (data.timeline.prev_batch ?? null) : null,\n            });\n        });\n\n        // attempt to prune the timeline by jumping between events which have\n        // pagination tokens.\n        if (currentData._timeline.length > this.opts.maxTimelineEntries!) {\n            const startIndex = currentData._timeline.length - this.opts.maxTimelineEntries!;\n            for (let i = startIndex; i < currentData._timeline.length; i++) {\n                if (currentData._timeline[i].token) {\n                    // keep all events after this, including this one\n                    currentData._timeline = currentData._timeline.slice(i, currentData._timeline.length);\n                    break;\n                }\n            }\n        }\n    }\n\n    /**\n     * Return everything under the 'rooms' key from a /sync response which\n     * represents all room data that should be stored. This should be paired\n     * with the sync token which represents the most recent /sync response\n     * provided to accumulate().\n     * @param forDatabase - True to generate a sync to be saved to storage\n     * @returns An object with a \"nextBatch\", \"roomsData\" and \"accountData\"\n     * keys.\n     * The \"nextBatch\" key is a string which represents at what point in the\n     * /sync stream the accumulator reached. This token should be used when\n     * restarting a /sync stream at startup. Failure to do so can lead to missing\n     * events. The \"roomsData\" key is an Object which represents the entire\n     * /sync response from the 'rooms' key onwards. The \"accountData\" key is\n     * a list of raw events which represent global account data.\n     */\n    public getJSON(forDatabase = false): ISyncData {\n        const data: IRooms = {\n            join: {},\n            invite: {},\n            knock: {},\n            // always empty. This is set by /sync when a room was previously\n            // in 'invite' or 'join'. On fresh startup, the client won't know\n            // about any previous room being in 'invite' or 'join' so we can\n            // just omit mentioning it at all, even if it has previously come\n            // down /sync.\n            // The notable exception is when a client is kicked or banned:\n            // we may want to hold onto that room so the client can clearly see\n            // why their room has disappeared. We don't persist it though because\n            // it is unclear *when* we can safely remove the room from the DB.\n            // Instead, we assume that if you're loading from the DB, you've\n            // refreshed the page, which means you've seen the kick/ban already.\n            leave: {},\n        };\n        Object.keys(this.inviteRooms).forEach((roomId) => {\n            data.invite[roomId] = this.inviteRooms[roomId];\n        });\n        Object.keys(this.knockRooms).forEach((roomId) => {\n            data.knock[roomId] = this.knockRooms[roomId];\n        });\n        Object.keys(this.joinRooms).forEach((roomId) => {\n            const roomData = this.joinRooms[roomId];\n            const roomJson: IJoinedRoom & {\n                // We track both `state` and `state_after` for downgrade compatibility\n                \"state\": IState;\n                \"org.matrix.msc4222.state_after\": IState;\n            } = {\n                \"ephemeral\": { events: [] },\n                \"account_data\": { events: [] },\n                \"state\": { events: [] },\n                \"org.matrix.msc4222.state_after\": { events: [] },\n                \"timeline\": {\n                    events: [],\n                    prev_batch: null,\n                },\n                \"unread_notifications\": roomData._unreadNotifications,\n                \"unread_thread_notifications\": roomData._unreadThreadNotifications,\n                \"summary\": roomData._summary as IRoomSummary,\n            };\n            // Add account data\n            Object.keys(roomData._accountData).forEach((evType) => {\n                roomJson.account_data.events.push(roomData._accountData[evType]);\n            });\n\n            const receiptEvent = roomData._receipts.buildAccumulatedReceiptEvent(roomId);\n\n            // add only if we have some receipt data\n            if (receiptEvent) {\n                roomJson.ephemeral.events.push(receiptEvent);\n            }\n\n            // Add timeline data\n            roomData._timeline.forEach((msgData) => {\n                if (!roomJson.timeline.prev_batch) {\n                    // the first event we add to the timeline MUST match up to\n                    // the prev_batch token.\n                    if (!msgData.token) {\n                        return; // this shouldn't happen as we prune constantly.\n                    }\n                    roomJson.timeline.prev_batch = msgData.token;\n                }\n\n                let transformedEvent: (IRoomEvent | IStateEvent) & { _localTs?: number };\n                if (!forDatabase && isTaggedEvent(msgData.event)) {\n                    // This means we have to copy each event, so we can fix it up to\n                    // set a correct 'age' parameter whilst keeping the local timestamp\n                    // on our stored event. If this turns out to be a bottleneck, it could\n                    // be optimised either by doing this in the main process after the data\n                    // has been structured-cloned to go between the worker & main process,\n                    // or special-casing data from saved syncs to read the local timestamp\n                    // directly rather than turning it into age to then immediately be\n                    // transformed back again into a local timestamp.\n                    transformedEvent = Object.assign({}, msgData.event);\n                    if (transformedEvent.unsigned !== undefined) {\n                        transformedEvent.unsigned = Object.assign({}, transformedEvent.unsigned);\n                    }\n                    delete transformedEvent._localTs;\n                    transformedEvent.unsigned = transformedEvent.unsigned || {};\n                    transformedEvent.unsigned.age = Date.now() - msgData.event._localTs!;\n                } else {\n                    transformedEvent = msgData.event;\n                }\n                roomJson.timeline.events.push(transformedEvent);\n            });\n\n            // Add state data: roll back current state to the start of timeline,\n            // by \"reverse clobbering\" from the end of the timeline to the start.\n            // Convert maps back into arrays.\n            const rollBackState = Object.create(null);\n            for (let i = roomJson.timeline.events.length - 1; i >= 0; i--) {\n                const timelineEvent = roomJson.timeline.events[i];\n                if (\n                    (timelineEvent as IStateEvent).state_key === null ||\n                    (timelineEvent as IStateEvent).state_key === undefined\n                ) {\n                    continue; // not a state event\n                }\n                // since we're going back in time, we need to use the previous\n                // state value else we'll break causality. We don't have the\n                // complete previous state event, so we need to create one.\n                const prevStateEvent = deepCopy(timelineEvent);\n                if (prevStateEvent.unsigned) {\n                    if (prevStateEvent.unsigned.prev_content) {\n                        prevStateEvent.content = prevStateEvent.unsigned.prev_content;\n                    }\n                    if (prevStateEvent.unsigned.prev_sender) {\n                        prevStateEvent.sender = prevStateEvent.unsigned.prev_sender;\n                    }\n                }\n                setState(rollBackState, prevStateEvent);\n            }\n            Object.keys(roomData._currentState).forEach((evType) => {\n                Object.keys(roomData._currentState[evType]).forEach((stateKey) => {\n                    let ev = roomData._currentState[evType][stateKey];\n                    // Push to both fields to provide downgrade compatibility in the sync accumulator db\n                    // the code will prefer `state_after` if it is present\n                    roomJson[\"org.matrix.msc4222.state_after\"].events.push(ev);\n                    // Roll the state back to the value at the start of the timeline if it was changed\n                    if (rollBackState[evType] && rollBackState[evType][stateKey]) {\n                        ev = rollBackState[evType][stateKey];\n                    }\n                    roomJson.state.events.push(ev);\n                });\n            });\n            data.join[roomId] = roomJson;\n        });\n\n        // Add account data\n        const accData: IMinimalEvent[] = [];\n        Object.keys(this.accountData).forEach((evType) => {\n            accData.push(this.accountData[evType]);\n        });\n\n        return {\n            nextBatch: this.nextBatch!,\n            roomsData: data,\n            accountData: accData,\n        };\n    }\n\n    public getNextBatchToken(): string {\n        return this.nextBatch!;\n    }\n}\n\nfunction setState(eventMap: Record<string, Record<string, IStateEvent>>, event: IRoomEvent | IStateEvent): void {\n    if ((event as IStateEvent).state_key === null || (event as IStateEvent).state_key === undefined || !event.type) {\n        return;\n    }\n    if (!eventMap[event.type]) {\n        eventMap[event.type] = Object.create(null);\n    }\n    eventMap[event.type][(event as IStateEvent).state_key] = event as IStateEvent;\n}\n","/*\nCopyright 2015, 2016, 2019, 2023 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * This is an internal module.\n */\n\nimport unhomoglyph from \"unhomoglyph\";\nimport promiseRetry from \"p-retry\";\nimport { type Optional } from \"matrix-events-sdk\";\n\nimport { type IEvent, type MatrixEvent } from \"./models/event.ts\";\nimport { M_TIMESTAMP } from \"./@types/location.ts\";\nimport { ReceiptType } from \"./@types/read_receipts.ts\";\nimport { type BaseLogger } from \"./logger.ts\";\n\nconst interns = new Map<string, string>();\n\n/**\n * Internalises a string, reusing a known pointer or storing the pointer\n * if needed for future strings.\n * @param str - The string to internalise.\n * @returns The internalised string.\n */\nexport function internaliseString(str: string): string {\n    // Unwrap strings before entering the map, if we somehow got a wrapped\n    // string as our input. This should only happen from tests.\n    if ((str as unknown) instanceof String) {\n        str = str.toString();\n    }\n\n    // Check the map to see if we can store the value\n    if (!interns.has(str)) {\n        interns.set(str, str);\n    }\n\n    // Return any cached string reference\n    return interns.get(str)!;\n}\n\n/**\n * Encode a dictionary of query parameters.\n * Omits any undefined/null values.\n * @param params - A dict of key/values to encode e.g.\n * `{\"foo\": \"bar\", \"baz\": \"taz\"}`\n * @returns The encoded string e.g. foo=bar&baz=taz\n */\nexport function encodeParams(params: QueryDict, urlSearchParams?: URLSearchParams): URLSearchParams {\n    const searchParams = urlSearchParams ?? new URLSearchParams();\n    for (const [key, val] of Object.entries(params)) {\n        if (val !== undefined && val !== null) {\n            if (Array.isArray(val)) {\n                val.forEach((v) => {\n                    searchParams.append(key, String(v));\n                });\n            } else {\n                searchParams.append(key, String(val));\n            }\n        }\n    }\n    return searchParams;\n}\n\nexport type QueryDict = Record<string, string[] | string | number | boolean | undefined>;\n\n/**\n * Replace a stable parameter with the unstable naming for params\n */\nexport function replaceParam(stable: string, unstable: string, dict: QueryDict): QueryDict {\n    const result = {\n        ...dict,\n        [unstable]: dict[stable],\n    };\n    delete result[stable];\n    return result;\n}\n\n/**\n * Decode a query string in `application/x-www-form-urlencoded` format.\n * @param query - A query string to decode e.g.\n * foo=bar&via=server1&server2\n * @returns The decoded object, if any keys occurred multiple times\n * then the value will be an array of strings, else it will be an array.\n * This behaviour matches Node's qs.parse but is built on URLSearchParams\n * for native web compatibility\n */\nexport function decodeParams(query: string): Record<string, string | string[]> {\n    const o: Record<string, string | string[]> = {};\n    const params = new URLSearchParams(query);\n    for (const key of params.keys()) {\n        const val = params.getAll(key);\n        o[key] = val.length === 1 ? val[0] : val;\n    }\n    return o;\n}\n\n/**\n * Encodes a URI according to a set of template variables. Variables will be\n * passed through encodeURIComponent.\n * @param pathTemplate - The path with template variables e.g. '/foo/$bar'.\n * @param variables - The key/value pairs to replace the template\n * variables with. E.g. `{ \"$bar\": \"baz\" }`.\n * @returns The result of replacing all template variables e.g. '/foo/baz'.\n */\nexport function encodeUri(pathTemplate: string, variables: Record<string, Optional<string>>): string {\n    for (const key in variables) {\n        if (!variables.hasOwnProperty(key)) {\n            continue;\n        }\n        const value = variables[key];\n        if (value === undefined || value === null) {\n            continue;\n        }\n        pathTemplate = pathTemplate.replace(key, encodeURIComponent(value));\n    }\n    return pathTemplate;\n}\n\n/**\n * The removeElement() method removes the first element in the array that\n * satisfies (returns true) the provided testing function.\n * @param array - The array.\n * @param fn - Function to execute on each value in the array, with the\n * function signature `fn(element, index, array)`. Return true to\n * remove this element and break.\n * @param reverse - True to search in reverse order.\n * @returns True if an element was removed.\n */\nexport function removeElement<T>(array: T[], fn: (t: T, i?: number, a?: T[]) => boolean, reverse?: boolean): boolean {\n    let i: number;\n    if (reverse) {\n        for (i = array.length - 1; i >= 0; i--) {\n            if (fn(array[i], i, array)) {\n                array.splice(i, 1);\n                return true;\n            }\n        }\n    } else {\n        for (i = 0; i < array.length; i++) {\n            if (fn(array[i], i, array)) {\n                array.splice(i, 1);\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * Checks if the given thing is a function.\n * @param value - The thing to check.\n * @returns True if it is a function.\n */\nexport function isFunction(value: any): boolean {\n    return Object.prototype.toString.call(value) === \"[object Function]\";\n}\n\n/**\n * Checks that the given object has the specified keys.\n * @param obj - The object to check.\n * @param keys - The list of keys that 'obj' must have.\n * @throws If the object is missing keys.\n */\n// note using 'keys' here would shadow the 'keys' function defined above\nexport function checkObjectHasKeys(obj: object, keys: string[]): void {\n    for (const key of keys) {\n        if (!obj.hasOwnProperty(key)) {\n            throw new Error(\"Missing required key: \" + key);\n        }\n    }\n}\n\n/**\n * Deep copy the given object. The object MUST NOT have circular references and\n * MUST NOT have functions.\n * @param obj - The object to deep copy.\n * @returns A copy of the object without any references to the original.\n */\nexport function deepCopy<T>(obj: T): T {\n    return JSON.parse(JSON.stringify(obj));\n}\n\n/**\n * Compare two objects for equality. The objects MUST NOT have circular references.\n *\n * @param x - The first object to compare.\n * @param y - The second object to compare.\n *\n * @returns true if the two objects are equal\n */\nexport function deepCompare(x: any, y: any): boolean {\n    // Inspired by\n    // http://stackoverflow.com/questions/1068834/object-comparison-in-javascript#1144249\n\n    // Compare primitives and functions.\n    // Also check if both arguments link to the same object.\n    if (x === y) {\n        return true;\n    }\n\n    if (typeof x !== typeof y) {\n        return false;\n    }\n\n    // special-case NaN (since NaN !== NaN)\n    if (typeof x === \"number\" && isNaN(x) && isNaN(y)) {\n        return true;\n    }\n\n    // special-case null (since typeof null == 'object', but null.constructor\n    // throws)\n    if (x === null || y === null) {\n        return x === y;\n    }\n\n    // everything else is either an unequal primitive, or an object\n    if (!(x instanceof Object)) {\n        return false;\n    }\n\n    // check they are the same type of object\n    if (x.constructor !== y.constructor || x.prototype !== y.prototype) {\n        return false;\n    }\n\n    // special-casing for some special types of object\n    if (x instanceof RegExp || x instanceof Date) {\n        return x.toString() === y.toString();\n    }\n\n    // the object algorithm works for Array, but it's sub-optimal.\n    if (Array.isArray(x)) {\n        if (x.length !== y.length) {\n            return false;\n        }\n\n        for (let i = 0; i < x.length; i++) {\n            if (!deepCompare(x[i], y[i])) {\n                return false;\n            }\n        }\n    } else {\n        // check that all of y's direct keys are in x\n        for (const p in y) {\n            if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {\n                return false;\n            }\n        }\n\n        // finally, compare each of x's keys with y\n        for (const p in x) {\n            if (y.hasOwnProperty(p) !== x.hasOwnProperty(p) || !deepCompare(x[p], y[p])) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n// Dev note: This returns an array of tuples, but jsdoc doesn't like that. https://github.com/jsdoc/jsdoc/issues/1703\n/**\n * Creates an array of object properties/values (entries) then\n * sorts the result by key, recursively. The input object must\n * ensure it does not have loops. If the input is not an object\n * then it will be returned as-is.\n * @param obj - The object to get entries of\n * @returns The entries, sorted by key.\n */\nexport function deepSortedObjectEntries(obj: any): [string, any][] {\n    if (typeof obj !== \"object\") return obj;\n\n    // Apparently these are object types...\n    if (obj === null || obj === undefined || Array.isArray(obj)) return obj;\n\n    const pairs: [string, any][] = [];\n    for (const [k, v] of Object.entries(obj)) {\n        pairs.push([k, deepSortedObjectEntries(v)]);\n    }\n\n    // lexicographicCompare is faster than localeCompare, so let's use that.\n    pairs.sort((a, b) => lexicographicCompare(a[0], b[0]));\n\n    return pairs;\n}\n\n/**\n * Returns whether the given value is a finite number without type-coercion\n *\n * @param value - the value to test\n * @returns whether or not value is a finite number without type-coercion\n */\nexport function isNumber(value: any): value is number {\n    return typeof value === \"number\" && isFinite(value);\n}\n\n/**\n * Removes zero width chars, diacritics and whitespace from the string\n * Also applies an unhomoglyph on the string, to prevent similar looking chars\n * @param str - the string to remove hidden characters from\n * @returns a string with the hidden characters removed\n */\nexport function removeHiddenChars(str: string): string {\n    if (typeof str === \"string\") {\n        return unhomoglyph(str.normalize(\"NFD\").replace(removeHiddenCharsRegex, \"\"));\n    }\n    return \"\";\n}\n\n/**\n * Removes the direction override characters from a string\n * @returns string with chars removed\n */\nexport function removeDirectionOverrideChars(str: string): string {\n    if (typeof str === \"string\") {\n        return str.replace(/[\\u202d-\\u202e]/g, \"\");\n    }\n    return \"\";\n}\n\nexport function normalize(str: string): string {\n    // Note: we have to match the filter with the removeHiddenChars() because the\n    // function strips spaces and other characters (M becomes RN for example, in lowercase).\n    return (\n        removeHiddenChars(str.toLowerCase())\n            // Strip all punctuation\n            .replace(/[\\\\'!\"#$%&()*+,\\-./:;<=>?@[\\]^_`{|}~\\u2000-\\u206f\\u2e00-\\u2e7f]/g, \"\")\n            // We also doubly convert to lowercase to work around oddities of the library.\n            .toLowerCase()\n    );\n}\n\n// Regex matching bunch of unicode control characters and otherwise misleading/invisible characters.\n// Includes:\n// various width spaces U+2000 - U+200D\n// LTR and RTL marks U+200E and U+200F\n// LTR/RTL and other directional formatting marks U+202A - U+202F\n// Arabic Letter RTL mark U+061C\n// Combining characters U+0300 - U+036F\n// Zero width no-break space (BOM) U+FEFF\n// Blank/invisible characters (U2800, U2062-U2063)\n// eslint-disable-next-line no-misleading-character-class\nconst removeHiddenCharsRegex = /[\\u2000-\\u200F\\u202A-\\u202F\\u0300-\\u036F\\uFEFF\\u061C\\u2800\\u2062-\\u2063\\s]/g;\n\nexport function escapeRegExp(string: string): string {\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n}\n\n/**\n * Converts Matrix glob-style string to a regular expression\n * https://spec.matrix.org/v1.7/appendices/#glob-style-matching\n * @param glob - Matrix glob-style string\n * @returns regular expression\n */\nexport function globToRegexp(glob: string): string {\n    return escapeRegExp(glob).replace(/\\\\\\*/g, \".*\").replace(/\\?/g, \".\");\n}\n\nexport function ensureNoTrailingSlash(url: string): string;\nexport function ensureNoTrailingSlash(url: undefined): undefined;\nexport function ensureNoTrailingSlash(url?: string): string | undefined;\nexport function ensureNoTrailingSlash(url?: string): string | undefined {\n    if (url?.endsWith(\"/\")) {\n        return url.slice(0, -1);\n    } else {\n        return url;\n    }\n}\n\n/**\n * Returns a promise which resolves with a given value after the given number of ms\n */\nexport function sleep<T>(ms: number, value?: T): Promise<T> {\n    return new Promise((resolve) => {\n        setTimeout(resolve, ms, value);\n    });\n}\n\n/**\n * Utility to log the duration of a promise.\n *\n * @param logger - The logger to log to.\n * @param name - The name of the operation.\n * @param block - The block to execute.\n */\nexport async function logDuration<T>(logger: BaseLogger, name: string, block: () => Promise<T>): Promise<T> {\n    const start = Date.now();\n    try {\n        return await block();\n    } finally {\n        const end = Date.now();\n        logger.debug(`[Perf]: ${name} took ${end - start}ms`);\n    }\n}\n\n/**\n * Promise/async version of {@link setImmediate}.\n *\n * Implementation is based on `setTimeout` for wider compatibility.\n * @deprecated Use {@link sleep} instead.\n */\nexport function immediate(): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve));\n}\n\nexport function isNullOrUndefined(val: any): boolean {\n    return val === null || val === undefined;\n}\n\nexport interface IDeferred<T> {\n    resolve: (value: T | Promise<T>) => void;\n    reject: (reason?: any) => void;\n    promise: Promise<T>;\n}\n\n// Returns a Deferred\nexport function defer<T = void>(): IDeferred<T> {\n    let resolve!: IDeferred<T>[\"resolve\"];\n    let reject!: IDeferred<T>[\"reject\"];\n\n    const promise = new Promise<T>((_resolve, _reject) => {\n        resolve = _resolve;\n        reject = _reject;\n    });\n\n    return { resolve, reject, promise };\n}\n\nexport async function promiseMapSeries<T>(\n    promises: Array<T | Promise<T>>,\n    fn: (t: T) => Promise<unknown> | undefined, // if async we don't care about the type as we only await resolution\n): Promise<void> {\n    for (const o of promises) {\n        await fn(await o);\n    }\n}\n\nexport function promiseTry<T>(fn: () => T | Promise<T>): Promise<T> {\n    return Promise.resolve(fn());\n}\n\n// Creates and awaits all promises, running no more than `chunkSize` at the same time\nexport async function chunkPromises<T>(fns: (() => Promise<T>)[], chunkSize: number): Promise<T[]> {\n    const results: T[] = [];\n    for (let i = 0; i < fns.length; i += chunkSize) {\n        results.push(...(await Promise.all(fns.slice(i, i + chunkSize).map((fn) => fn()))));\n    }\n    return results;\n}\n\n/**\n * Retries the function until it succeeds or is interrupted. The given function must return\n * a promise which throws/rejects on error, otherwise the retry will assume the request\n * succeeded. The promise chain returned will contain the successful promise. The given function\n * should always return a new promise.\n * @param promiseFn - The function to call to get a fresh promise instance. Takes an\n * attempt count as an argument, for logging/debugging purposes.\n * @returns The promise for the retried operation.\n */\nexport function simpleRetryOperation<T>(promiseFn: (attempt: number) => Promise<T>): Promise<T> {\n    return promiseRetry(\n        (attempt: number) => {\n            return promiseFn(attempt);\n        },\n        {\n            forever: true,\n            factor: 2,\n            minTimeout: 3000, // ms\n            maxTimeout: 15000, // ms\n        },\n    );\n}\n\n// String averaging inspired by https://stackoverflow.com/a/2510816\n// Dev note: We make the alphabet a string because it's easier to write syntactically\n// than arrays. Thankfully, strings implement the useful parts of the Array interface\n// anyhow.\n\n/**\n * The default alphabet used by string averaging in this SDK. This matches\n * all usefully printable ASCII characters (0x20-0x7E, inclusive).\n */\nexport const DEFAULT_ALPHABET = ((): string => {\n    let str = \"\";\n    for (let c = 0x20; c <= 0x7e; c++) {\n        str += String.fromCharCode(c);\n    }\n    return str;\n})();\n\n/**\n * Pads a string using the given alphabet as a base. The returned string will be\n * padded at the end with the first character in the alphabet.\n *\n * This is intended for use with string averaging.\n * @param s - The string to pad.\n * @param n - The length to pad to.\n * @param alphabet - The alphabet to use as a single string.\n * @returns The padded string.\n */\nexport function alphabetPad(s: string, n: number, alphabet = DEFAULT_ALPHABET): string {\n    return s.padEnd(n, alphabet[0]);\n}\n\n/**\n * Converts a baseN number to a string, where N is the alphabet's length.\n *\n * This is intended for use with string averaging.\n * @param n - The baseN number.\n * @param alphabet - The alphabet to use as a single string.\n * @returns The baseN number encoded as a string from the alphabet.\n */\nexport function baseToString(n: bigint, alphabet = DEFAULT_ALPHABET): string {\n    // Developer note: the stringToBase() function offsets the character set by 1 so that repeated\n    // characters (ie: \"aaaaaa\" in a..z) don't come out as zero. We have to reverse this here as\n    // otherwise we'll be wrong in our conversion. Undoing a +1 before an exponent isn't very fun\n    // though, so we rely on a lengthy amount of `x - 1` and integer division rules to reach a\n    // sane state. This also means we have to do rollover detection: see below.\n\n    const len = BigInt(alphabet.length);\n    if (n <= len) {\n        return alphabet[Number(n) - 1] ?? \"\";\n    }\n\n    let d = n / len;\n    let r = Number(n % len) - 1;\n\n    // Rollover detection: if the remainder is negative, it means that the string needs\n    // to roll over by 1 character downwards (ie: in a..z, the previous to \"aaa\" would be\n    // \"zz\").\n    if (r < 0) {\n        d -= BigInt(Math.abs(r)); // abs() is just to be clear what we're doing. Could also `+= r`.\n        r = Number(len) - 1;\n    }\n\n    return baseToString(d, alphabet) + alphabet[r];\n}\n\n/**\n * Converts a string to a baseN number, where N is the alphabet's length.\n *\n * This is intended for use with string averaging.\n * @param s - The string to convert to a number.\n * @param alphabet - The alphabet to use as a single string.\n * @returns The baseN number.\n */\nexport function stringToBase(s: string, alphabet = DEFAULT_ALPHABET): bigint {\n    const len = BigInt(alphabet.length);\n\n    // In our conversion to baseN we do a couple performance optimizations to avoid using\n    // excess CPU and such. To create baseN numbers, the input string needs to be reversed\n    // so the exponents stack up appropriately, as the last character in the unreversed\n    // string has less impact than the first character (in \"abc\" the A is a lot more important\n    // for lexicographic sorts). We also do a trick with the character codes to optimize the\n    // alphabet lookup, avoiding an index scan of `alphabet.indexOf(reversedStr[i])` - we know\n    // that the alphabet and (theoretically) the input string are constrained on character sets\n    // and thus can do simple subtraction to end up with the same result.\n\n    // Developer caution: we carefully cast to BigInt here to avoid losing precision. We cannot\n    // rely on Math.pow() (for example) to be capable of handling our insane numbers.\n\n    let result = BigInt(0);\n    for (let i = s.length - 1, j = BigInt(0); i >= 0; i--, j++) {\n        const charIndex = s.charCodeAt(i) - alphabet.charCodeAt(0);\n\n        // We add 1 to the char index to offset the whole numbering scheme. We unpack this in\n        // the baseToString() function.\n        result += BigInt(1 + charIndex) * len ** j;\n    }\n    return result;\n}\n\n/**\n * Averages two strings, returning the midpoint between them. This is accomplished by\n * converting both to baseN numbers (where N is the alphabet's length) then averaging\n * those before re-encoding as a string.\n * @param a - The first string.\n * @param b - The second string.\n * @param alphabet - The alphabet to use as a single string.\n * @returns The midpoint between the strings, as a string.\n */\nexport function averageBetweenStrings(a: string, b: string, alphabet = DEFAULT_ALPHABET): string {\n    const padN = Math.max(a.length, b.length);\n    const baseA = stringToBase(alphabetPad(a, padN, alphabet), alphabet);\n    const baseB = stringToBase(alphabetPad(b, padN, alphabet), alphabet);\n    const avg = (baseA + baseB) / BigInt(2);\n\n    // Detect integer division conflicts. This happens when two numbers are divided too close so\n    // we lose a .5 precision. We need to add a padding character in these cases.\n    if (avg === baseA || avg == baseB) {\n        return baseToString(avg, alphabet) + alphabet[0];\n    }\n\n    return baseToString(avg, alphabet);\n}\n\n/**\n * Finds the next string using the alphabet provided. This is done by converting the\n * string to a baseN number, where N is the alphabet's length, then adding 1 before\n * converting back to a string.\n * @param s - The string to start at.\n * @param alphabet - The alphabet to use as a single string.\n * @returns The string which follows the input string.\n */\nexport function nextString(s: string, alphabet = DEFAULT_ALPHABET): string {\n    return baseToString(stringToBase(s, alphabet) + BigInt(1), alphabet);\n}\n\n/**\n * Finds the previous string using the alphabet provided. This is done by converting the\n * string to a baseN number, where N is the alphabet's length, then subtracting 1 before\n * converting back to a string.\n * @param s - The string to start at.\n * @param alphabet - The alphabet to use as a single string.\n * @returns The string which precedes the input string.\n */\nexport function prevString(s: string, alphabet = DEFAULT_ALPHABET): string {\n    return baseToString(stringToBase(s, alphabet) - BigInt(1), alphabet);\n}\n\n/**\n * Compares strings lexicographically as a sort-safe function.\n * @param a - The first (reference) string.\n * @param b - The second (compare) string.\n * @returns Negative if the reference string is before the compare string;\n * positive if the reference string is after; and zero if equal.\n */\nexport function lexicographicCompare(a: string, b: string): number {\n    // Dev note: this exists because I'm sad that you can use math operators on strings, so I've\n    // hidden the operation in this function.\n    if (a < b) {\n        return -1;\n    } else if (a > b) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\n/**\n * This function is similar to Object.assign() but it assigns recursively and\n * allows you to ignore nullish values from the source\n *\n * @returns the target object\n */\nexport function recursivelyAssign<T1 extends T2, T2 extends Record<string, any>>(\n    target: T1,\n    source: T2,\n    ignoreNullish = false,\n): T1 & T2 {\n    for (const [sourceKey, sourceValue] of Object.entries(source)) {\n        if (target[sourceKey] instanceof Object && sourceValue) {\n            recursivelyAssign(target[sourceKey], sourceValue);\n            continue;\n        }\n        if ((sourceValue !== null && sourceValue !== undefined) || !ignoreNullish) {\n            safeSet(target, sourceKey, sourceValue);\n            continue;\n        }\n    }\n    return target as T1 & T2;\n}\n\nfunction getContentTimestampWithFallback(event: MatrixEvent): number {\n    return M_TIMESTAMP.findIn<number>(event.getContent()) ?? -1;\n}\n\n/**\n * Sort events by their content m.ts property\n * Latest timestamp first\n */\nexport function sortEventsByLatestContentTimestamp(left: MatrixEvent, right: MatrixEvent): number {\n    return getContentTimestampWithFallback(right) - getContentTimestampWithFallback(left);\n}\n\nexport function isSupportedReceiptType(receiptType: string): boolean {\n    return [ReceiptType.Read, ReceiptType.ReadPrivate].includes(receiptType as ReceiptType);\n}\n\n/**\n * Determines whether two maps are equal.\n * @param eq - The equivalence relation to compare values by. Defaults to strict equality.\n */\nexport function mapsEqual<K, V>(x: Map<K, V>, y: Map<K, V>, eq = (v1: V, v2: V): boolean => v1 === v2): boolean {\n    if (x.size !== y.size) return false;\n    for (const [k, v1] of x) {\n        const v2 = y.get(k);\n        if (v2 === undefined || !eq(v1, v2)) return false;\n    }\n    return true;\n}\n\nfunction processMapToObjectValue(value: any): any {\n    if (value instanceof Map) {\n        // Value is a Map. Recursively map it to an object.\n        return recursiveMapToObject(value);\n    } else if (Array.isArray(value)) {\n        // Value is an Array. Recursively map the value (e.g. to cover Array of Arrays).\n        return value.map((v) => processMapToObjectValue(v));\n    } else {\n        return value;\n    }\n}\n\n/**\n * Recursively converts Maps to plain objects.\n * Also supports sub-lists of Maps.\n */\nexport function recursiveMapToObject(map: Map<any, any>): Record<any, any> {\n    const targetMap = new Map();\n\n    for (const [key, value] of map) {\n        targetMap.set(key, processMapToObjectValue(value));\n    }\n\n    return Object.fromEntries(targetMap.entries());\n}\n\nexport function unsafeProp<K extends keyof any | undefined>(prop: K): boolean {\n    return prop === \"__proto__\" || prop === \"prototype\" || prop === \"constructor\";\n}\n\nexport function safeSet<O extends Record<any, any>, K extends keyof O>(obj: O, prop: K, value: O[K]): void {\n    if (unsafeProp(prop)) {\n        throw new Error(\"Trying to modify prototype or constructor\");\n    }\n\n    obj[prop] = value;\n}\n\nexport function noUnsafeEventProps(event: Partial<IEvent>): boolean {\n    return !(unsafeProp(event.room_id) || unsafeProp(event.sender) || unsafeProp(event.event_id));\n}\n\nexport class MapWithDefault<K, V> extends Map<K, V> {\n    public constructor(private createDefault: () => V) {\n        super();\n    }\n\n    /**\n     * Returns the value if the key already exists.\n     * If not, it creates a new value under that key using the ctor callback and returns it.\n     */\n    public getOrCreate(key: K): V {\n        if (!this.has(key)) {\n            this.set(key, this.createDefault());\n        }\n\n        return this.get(key)!;\n    }\n}\n","/*\n* loglevel - https://github.com/pimterry/loglevel\n*\n* Copyright (c) 2013 Tim Perry\n* Licensed under the MIT license.\n*/\n(function (root, definition) {\n    \"use strict\";\n    if (typeof define === 'function' && define.amd) {\n        define(definition);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = definition();\n    } else {\n        root.log = definition();\n    }\n}(this, function () {\n    \"use strict\";\n\n    // Slightly dubious tricks to cut down minimized file size\n    var noop = function() {};\n    var undefinedType = \"undefined\";\n    var isIE = (typeof window !== undefinedType) && (typeof window.navigator !== undefinedType) && (\n        /Trident\\/|MSIE /.test(window.navigator.userAgent)\n    );\n\n    var logMethods = [\n        \"trace\",\n        \"debug\",\n        \"info\",\n        \"warn\",\n        \"error\"\n    ];\n\n    var _loggersByName = {};\n    var defaultLogger = null;\n\n    // Cross-browser bind equivalent that works at least back to IE6\n    function bindMethod(obj, methodName) {\n        var method = obj[methodName];\n        if (typeof method.bind === 'function') {\n            return method.bind(obj);\n        } else {\n            try {\n                return Function.prototype.bind.call(method, obj);\n            } catch (e) {\n                // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n                return function() {\n                    return Function.prototype.apply.apply(method, [obj, arguments]);\n                };\n            }\n        }\n    }\n\n    // Trace() doesn't print the message in IE, so for that case we need to wrap it\n    function traceForIE() {\n        if (console.log) {\n            if (console.log.apply) {\n                console.log.apply(console, arguments);\n            } else {\n                // In old IE, native console methods themselves don't have apply().\n                Function.prototype.apply.apply(console.log, [console, arguments]);\n            }\n        }\n        if (console.trace) console.trace();\n    }\n\n    // Build the best logging method possible for this env\n    // Wherever possible we want to bind, not wrap, to preserve stack traces\n    function realMethod(methodName) {\n        if (methodName === 'debug') {\n            methodName = 'log';\n        }\n\n        if (typeof console === undefinedType) {\n            return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\n        } else if (methodName === 'trace' && isIE) {\n            return traceForIE;\n        } else if (console[methodName] !== undefined) {\n            return bindMethod(console, methodName);\n        } else if (console.log !== undefined) {\n            return bindMethod(console, 'log');\n        } else {\n            return noop;\n        }\n    }\n\n    // These private functions always need `this` to be set properly\n\n    function replaceLoggingMethods() {\n        /*jshint validthis:true */\n        var level = this.getLevel();\n\n        // Replace the actual methods.\n        for (var i = 0; i < logMethods.length; i++) {\n            var methodName = logMethods[i];\n            this[methodName] = (i < level) ?\n                noop :\n                this.methodFactory(methodName, level, this.name);\n        }\n\n        // Define log.log as an alias for log.debug\n        this.log = this.debug;\n\n        // Return any important warnings.\n        if (typeof console === undefinedType && level < this.levels.SILENT) {\n            return \"No console available for logging\";\n        }\n    }\n\n    // In old IE versions, the console isn't present until you first open it.\n    // We build realMethod() replacements here that regenerate logging methods\n    function enableLoggingWhenConsoleArrives(methodName) {\n        return function () {\n            if (typeof console !== undefinedType) {\n                replaceLoggingMethods.call(this);\n                this[methodName].apply(this, arguments);\n            }\n        };\n    }\n\n    // By default, we use closely bound real methods wherever possible, and\n    // otherwise we wait for a console to appear, and then try again.\n    function defaultMethodFactory(methodName, _level, _loggerName) {\n        /*jshint validthis:true */\n        return realMethod(methodName) ||\n               enableLoggingWhenConsoleArrives.apply(this, arguments);\n    }\n\n    function Logger(name, factory) {\n      // Private instance variables.\n      var self = this;\n      /**\n       * The level inherited from a parent logger (or a global default). We\n       * cache this here rather than delegating to the parent so that it stays\n       * in sync with the actual logging methods that we have installed (the\n       * parent could change levels but we might not have rebuilt the loggers\n       * in this child yet).\n       * @type {number}\n       */\n      var inheritedLevel;\n      /**\n       * The default level for this logger, if any. If set, this overrides\n       * `inheritedLevel`.\n       * @type {number|null}\n       */\n      var defaultLevel;\n      /**\n       * A user-specific level for this logger. If set, this overrides\n       * `defaultLevel`.\n       * @type {number|null}\n       */\n      var userLevel;\n\n      var storageKey = \"loglevel\";\n      if (typeof name === \"string\") {\n        storageKey += \":\" + name;\n      } else if (typeof name === \"symbol\") {\n        storageKey = undefined;\n      }\n\n      function persistLevelIfPossible(levelNum) {\n          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage[storageKey] = levelName;\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\n          } catch (ignore) {}\n      }\n\n      function getPersistedLevel() {\n          var storedLevel;\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          try {\n              storedLevel = window.localStorage[storageKey];\n          } catch (ignore) {}\n\n          // Fallback to cookies if local storage gives us nothing\n          if (typeof storedLevel === undefinedType) {\n              try {\n                  var cookie = window.document.cookie;\n                  var cookieName = encodeURIComponent(storageKey);\n                  var location = cookie.indexOf(cookieName + \"=\");\n                  if (location !== -1) {\n                      storedLevel = /^([^;]+)/.exec(\n                          cookie.slice(location + cookieName.length + 1)\n                      )[1];\n                  }\n              } catch (ignore) {}\n          }\n\n          // If the stored level is not valid, treat it as if nothing was stored.\n          if (self.levels[storedLevel] === undefined) {\n              storedLevel = undefined;\n          }\n\n          return storedLevel;\n      }\n\n      function clearPersistedLevel() {\n          if (typeof window === undefinedType || !storageKey) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage.removeItem(storageKey);\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=; expires=Thu, 01 Jan 1970 00:00:00 UTC\";\n          } catch (ignore) {}\n      }\n\n      function normalizeLevel(input) {\n          var level = input;\n          if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\n              level = self.levels[level.toUpperCase()];\n          }\n          if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\n              return level;\n          } else {\n              throw new TypeError(\"log.setLevel() called with invalid level: \" + input);\n          }\n      }\n\n      /*\n       *\n       * Public logger API - see https://github.com/pimterry/loglevel for details\n       *\n       */\n\n      self.name = name;\n\n      self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\n          \"ERROR\": 4, \"SILENT\": 5};\n\n      self.methodFactory = factory || defaultMethodFactory;\n\n      self.getLevel = function () {\n          if (userLevel != null) {\n            return userLevel;\n          } else if (defaultLevel != null) {\n            return defaultLevel;\n          } else {\n            return inheritedLevel;\n          }\n      };\n\n      self.setLevel = function (level, persist) {\n          userLevel = normalizeLevel(level);\n          if (persist !== false) {  // defaults to true\n              persistLevelIfPossible(userLevel);\n          }\n\n          // NOTE: in v2, this should call rebuild(), which updates children.\n          return replaceLoggingMethods.call(self);\n      };\n\n      self.setDefaultLevel = function (level) {\n          defaultLevel = normalizeLevel(level);\n          if (!getPersistedLevel()) {\n              self.setLevel(level, false);\n          }\n      };\n\n      self.resetLevel = function () {\n          userLevel = null;\n          clearPersistedLevel();\n          replaceLoggingMethods.call(self);\n      };\n\n      self.enableAll = function(persist) {\n          self.setLevel(self.levels.TRACE, persist);\n      };\n\n      self.disableAll = function(persist) {\n          self.setLevel(self.levels.SILENT, persist);\n      };\n\n      self.rebuild = function () {\n          if (defaultLogger !== self) {\n              inheritedLevel = normalizeLevel(defaultLogger.getLevel());\n          }\n          replaceLoggingMethods.call(self);\n\n          if (defaultLogger === self) {\n              for (var childName in _loggersByName) {\n                _loggersByName[childName].rebuild();\n              }\n          }\n      };\n\n      // Initialize all the internal levels.\n      inheritedLevel = normalizeLevel(\n          defaultLogger ? defaultLogger.getLevel() : \"WARN\"\n      );\n      var initialLevel = getPersistedLevel();\n      if (initialLevel != null) {\n          userLevel = normalizeLevel(initialLevel);\n      }\n      replaceLoggingMethods.call(self);\n    }\n\n    /*\n     *\n     * Top-level API\n     *\n     */\n\n    defaultLogger = new Logger();\n\n    defaultLogger.getLogger = function getLogger(name) {\n        if ((typeof name !== \"symbol\" && typeof name !== \"string\") || name === \"\") {\n            throw new TypeError(\"You must supply a name when creating a logger.\");\n        }\n\n        var logger = _loggersByName[name];\n        if (!logger) {\n            logger = _loggersByName[name] = new Logger(\n                name,\n                defaultLogger.methodFactory\n            );\n        }\n        return logger;\n    };\n\n    // Grab the current global log variable in case of overwrite\n    var _log = (typeof window !== undefinedType) ? window.log : undefined;\n    defaultLogger.noConflict = function() {\n        if (typeof window !== undefinedType &&\n               window.log === defaultLogger) {\n            window.log = _log;\n        }\n\n        return defaultLogger;\n    };\n\n    defaultLogger.getLoggers = function getLoggers() {\n        return _loggersByName;\n    };\n\n    // ES6 default export, for compatibility\n    defaultLogger['default'] = defaultLogger;\n\n    return defaultLogger;\n}));\n","'use strict';\nconst retry = require('retry');\n\nconst networkErrorMsgs = [\n\t'Failed to fetch', // Chrome\n\t'NetworkError when attempting to fetch resource.', // Firefox\n\t'The Internet connection appears to be offline.', // Safari\n\t'Network request failed' // `cross-fetch`\n];\n\nclass AbortError extends Error {\n\tconstructor(message) {\n\t\tsuper();\n\n\t\tif (message instanceof Error) {\n\t\t\tthis.originalError = message;\n\t\t\t({message} = message);\n\t\t} else {\n\t\t\tthis.originalError = new Error(message);\n\t\t\tthis.originalError.stack = this.stack;\n\t\t}\n\n\t\tthis.name = 'AbortError';\n\t\tthis.message = message;\n\t}\n}\n\nconst decorateErrorWithCounts = (error, attemptNumber, options) => {\n\t// Minus 1 from attemptNumber because the first attempt does not count as a retry\n\tconst retriesLeft = options.retries - (attemptNumber - 1);\n\n\terror.attemptNumber = attemptNumber;\n\terror.retriesLeft = retriesLeft;\n\treturn error;\n};\n\nconst isNetworkError = errorMessage => networkErrorMsgs.includes(errorMessage);\n\nconst pRetry = (input, options) => new Promise((resolve, reject) => {\n\toptions = {\n\t\tonFailedAttempt: () => {},\n\t\tretries: 10,\n\t\t...options\n\t};\n\n\tconst operation = retry.operation(options);\n\n\toperation.attempt(async attemptNumber => {\n\t\ttry {\n\t\t\tresolve(await input(attemptNumber));\n\t\t} catch (error) {\n\t\t\tif (!(error instanceof Error)) {\n\t\t\t\treject(new TypeError(`Non-error was thrown: \"${error}\". You should only throw errors.`));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (error instanceof AbortError) {\n\t\t\t\toperation.stop();\n\t\t\t\treject(error.originalError);\n\t\t\t} else if (error instanceof TypeError && !isNetworkError(error.message)) {\n\t\t\t\toperation.stop();\n\t\t\t\treject(error);\n\t\t\t} else {\n\t\t\t\tdecorateErrorWithCounts(error, attemptNumber, options);\n\n\t\t\t\ttry {\n\t\t\t\t\tawait options.onFailedAttempt(error);\n\t\t\t\t} catch (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!operation.retry(error)) {\n\t\t\t\t\treject(operation.mainError());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n});\n\nmodule.exports = pRetry;\n// TODO: remove this in the next major version\nmodule.exports.default = pRetry;\n\nmodule.exports.AbortError = AbortError;\n","module.exports = require('./lib/retry');","var RetryOperation = require('./retry_operation');\n\nexports.operation = function(options) {\n  var timeouts = exports.timeouts(options);\n  return new RetryOperation(timeouts, {\n      forever: options && (options.forever || options.retries === Infinity),\n      unref: options && options.unref,\n      maxRetryTime: options && options.maxRetryTime\n  });\n};\n\nexports.timeouts = function(options) {\n  if (options instanceof Array) {\n    return [].concat(options);\n  }\n\n  var opts = {\n    retries: 10,\n    factor: 2,\n    minTimeout: 1 * 1000,\n    maxTimeout: Infinity,\n    randomize: false\n  };\n  for (var key in options) {\n    opts[key] = options[key];\n  }\n\n  if (opts.minTimeout > opts.maxTimeout) {\n    throw new Error('minTimeout is greater than maxTimeout');\n  }\n\n  var timeouts = [];\n  for (var i = 0; i < opts.retries; i++) {\n    timeouts.push(this.createTimeout(i, opts));\n  }\n\n  if (options && options.forever && !timeouts.length) {\n    timeouts.push(this.createTimeout(i, opts));\n  }\n\n  // sort the array numerically ascending\n  timeouts.sort(function(a,b) {\n    return a - b;\n  });\n\n  return timeouts;\n};\n\nexports.createTimeout = function(attempt, opts) {\n  var random = (opts.randomize)\n    ? (Math.random() + 1)\n    : 1;\n\n  var timeout = Math.round(random * Math.max(opts.minTimeout, 1) * Math.pow(opts.factor, attempt));\n  timeout = Math.min(timeout, opts.maxTimeout);\n\n  return timeout;\n};\n\nexports.wrap = function(obj, options, methods) {\n  if (options instanceof Array) {\n    methods = options;\n    options = null;\n  }\n\n  if (!methods) {\n    methods = [];\n    for (var key in obj) {\n      if (typeof obj[key] === 'function') {\n        methods.push(key);\n      }\n    }\n  }\n\n  for (var i = 0; i < methods.length; i++) {\n    var method   = methods[i];\n    var original = obj[method];\n\n    obj[method] = function retryWrapper(original) {\n      var op       = exports.operation(options);\n      var args     = Array.prototype.slice.call(arguments, 1);\n      var callback = args.pop();\n\n      args.push(function(err) {\n        if (op.retry(err)) {\n          return;\n        }\n        if (err) {\n          arguments[0] = op.mainError();\n        }\n        callback.apply(this, arguments);\n      });\n\n      op.attempt(function() {\n        original.apply(obj, args);\n      });\n    }.bind(obj, original);\n    obj[method].options = options;\n  }\n};\n","function RetryOperation(timeouts, options) {\n  // Compatibility for the old (timeouts, retryForever) signature\n  if (typeof options === 'boolean') {\n    options = { forever: options };\n  }\n\n  this._originalTimeouts = JSON.parse(JSON.stringify(timeouts));\n  this._timeouts = timeouts;\n  this._options = options || {};\n  this._maxRetryTime = options && options.maxRetryTime || Infinity;\n  this._fn = null;\n  this._errors = [];\n  this._attempts = 1;\n  this._operationTimeout = null;\n  this._operationTimeoutCb = null;\n  this._timeout = null;\n  this._operationStart = null;\n  this._timer = null;\n\n  if (this._options.forever) {\n    this._cachedTimeouts = this._timeouts.slice(0);\n  }\n}\nmodule.exports = RetryOperation;\n\nRetryOperation.prototype.reset = function() {\n  this._attempts = 1;\n  this._timeouts = this._originalTimeouts.slice(0);\n}\n\nRetryOperation.prototype.stop = function() {\n  if (this._timeout) {\n    clearTimeout(this._timeout);\n  }\n  if (this._timer) {\n    clearTimeout(this._timer);\n  }\n\n  this._timeouts       = [];\n  this._cachedTimeouts = null;\n};\n\nRetryOperation.prototype.retry = function(err) {\n  if (this._timeout) {\n    clearTimeout(this._timeout);\n  }\n\n  if (!err) {\n    return false;\n  }\n  var currentTime = new Date().getTime();\n  if (err && currentTime - this._operationStart >= this._maxRetryTime) {\n    this._errors.push(err);\n    this._errors.unshift(new Error('RetryOperation timeout occurred'));\n    return false;\n  }\n\n  this._errors.push(err);\n\n  var timeout = this._timeouts.shift();\n  if (timeout === undefined) {\n    if (this._cachedTimeouts) {\n      // retry forever, only keep last error\n      this._errors.splice(0, this._errors.length - 1);\n      timeout = this._cachedTimeouts.slice(-1);\n    } else {\n      return false;\n    }\n  }\n\n  var self = this;\n  this._timer = setTimeout(function() {\n    self._attempts++;\n\n    if (self._operationTimeoutCb) {\n      self._timeout = setTimeout(function() {\n        self._operationTimeoutCb(self._attempts);\n      }, self._operationTimeout);\n\n      if (self._options.unref) {\n          self._timeout.unref();\n      }\n    }\n\n    self._fn(self._attempts);\n  }, timeout);\n\n  if (this._options.unref) {\n      this._timer.unref();\n  }\n\n  return true;\n};\n\nRetryOperation.prototype.attempt = function(fn, timeoutOps) {\n  this._fn = fn;\n\n  if (timeoutOps) {\n    if (timeoutOps.timeout) {\n      this._operationTimeout = timeoutOps.timeout;\n    }\n    if (timeoutOps.cb) {\n      this._operationTimeoutCb = timeoutOps.cb;\n    }\n  }\n\n  var self = this;\n  if (this._operationTimeoutCb) {\n    this._timeout = setTimeout(function() {\n      self._operationTimeoutCb();\n    }, self._operationTimeout);\n  }\n\n  this._operationStart = new Date().getTime();\n\n  this._fn(this._attempts);\n};\n\nRetryOperation.prototype.try = function(fn) {\n  console.log('Using RetryOperation.try() is deprecated');\n  this.attempt(fn);\n};\n\nRetryOperation.prototype.start = function(fn) {\n  console.log('Using RetryOperation.start() is deprecated');\n  this.attempt(fn);\n};\n\nRetryOperation.prototype.start = RetryOperation.prototype.try;\n\nRetryOperation.prototype.errors = function() {\n  return this._errors;\n};\n\nRetryOperation.prototype.attempts = function() {\n  return this._attempts;\n};\n\nRetryOperation.prototype.mainError = function() {\n  if (this._errors.length === 0) {\n    return null;\n  }\n\n  var counts = {};\n  var mainError = null;\n  var mainErrorCount = 0;\n\n  for (var i = 0; i < this._errors.length; i++) {\n    var error = this._errors[i];\n    var message = error.message;\n    var count = (counts[message] || 0) + 1;\n\n    counts[message] = count;\n\n    if (count >= mainErrorCount) {\n      mainError = error;\n      mainErrorCount = count;\n    }\n  }\n\n  return mainError;\n};\n","'use strict';\n\n\nvar data = require('./data.json');\n\nfunction escapeRegexp(str) {\n  return str.replace(/([.?*+^$[\\]\\\\(){}|-])/g, '\\\\$1');\n}\n\nvar REPLACE_RE = RegExp(Object.keys(data).map(escapeRegexp).join('|'), 'g');\n\nfunction replace_fn(match) {\n  return data[match];\n}\n\nfunction unhomoglyph(str) {\n  return str.replace(REPLACE_RE, replace_fn);\n}\n\nmodule.exports = unhomoglyph;\n","import toPropertyKey from \"./toPropertyKey.js\";\nfunction _defineProperty(e, r, t) {\n  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nexport { _defineProperty as default };","import _typeof from \"./typeof.js\";\nfunction toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nexport { toPrimitive as default };","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nfunction toPropertyKey(t) {\n  var i = toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nexport { toPropertyKey as default };","function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nexport { _typeof as default };"],"names":["EventType","UnstableValue","NamespacedValue","ReceiptType","UNREAD_THREAD_NOTIFICATIONS","ServerControlledNamespacedValue","constructor","stable","unstable","this","Error","name","altName","names","push","matches","val","findIn","obj","includedIn","arr","included","includes","args","_defineProperty","setPreferUnstable","preferUnstable","super","IndexedDBStoreWorker","postMessage","call","command","ev","_this$backend","_this$backend2","_this$backend3","_this$backend4","_this$backend5","_this$backend6","_this$backend7","_this$backend8","_this$backend9","_this$backend10","_this$backend11","_this$backend12","_this$backend13","_this$backend14","_this$backend15","_this$backend16","msg","data","prom","backend","LocalIndexedDBStoreBackend","indexedDB","Promise","resolve","connect","onClose","isNewlyCreated","clearDatabase","getSavedSync","setSyncData","syncToDatabase","getUserPresenceEvents","getNextBatchToken","getOutOfBandMembers","clearOutOfBandMembers","setOutOfBandMembers","getClientOptions","storeClientOptions","saveToDeviceBatches","getOldestToDeviceBatch","removeToDeviceBatch","undefined","then","ret","seq","result","err","logger","error","message","loglevel","methodName","logLevel","loggerName","prefix","unshift","console","log","getPrefixedLogger","prefixLogger","getChild","childPrefix","setLevel","DEBUG","ReceiptAccumulator","Map","MapWithDefault","setUnthreaded","userId","receipt","unthreadedReadReceipts","set","setThreaded","threadId","threadedReadReceipts","getOrCreate","allUnthreaded","entries","allThreaded","receiptsForThread","values","e","consumeEphemeralEvents","events","forEach","type","Receipt","content","Object","keys","eventId","key","value","isSupportedReceiptType","thread_id","buildAccumulatedReceiptEvent","roomId","receiptEvent","room_id","receiptEventContent","receiptData","recursiveMapToObject","size","Category","SyncAccumulator","opts","maxTimelineEntries","accumulate","syncResponse","fromDatabase","accumulateRooms","accumulateAccountData","nextBatch","next_batch","account_data","accountData","rooms","invite","accumulateRoom","Invite","join","Join","leave","Leave","knock","Knock","category","knockRooms","accumulateInviteState","accumulateKnockState","inviteRooms","accumulateJoinState","joinRooms","invite_state","currentData","hasAdded","i","length","current","state_key","knock_state","_ref","_data","_data$ephemeral","_data$state","_data$orgMatrixMsc","_data$timeline","_currentState","create","_timeline","_accountData","_unreadNotifications","_unreadThreadNotifications","_summary","_receipts","unread_notifications","summary","_sum$HEROES_KEY","_sum$JOINED_COUNT_KEY","_sum$INVITED_COUNT_KE","HEROES_KEY","INVITED_COUNT_KEY","JOINED_COUNT_KEY","acc","sum","ephemeral","timeline","limited","state","setState","index","_data$timeline$prev_b","transformedEvent","_e$unsigned","assign","unsigned","age","_localTs","Date","now","event","token","prev_batch","slice","getJSON","forDatabase","roomData","roomJson","evType","msgData","rollBackState","timelineEvent","prevStateEvent","deepCopy","prev_content","prev_sender","sender","stateKey","accData","roomsData","eventMap","JSON","parse","stringify","promiseTry","fn","str","c","String","fromCharCode","receiptType","Read","ReadPrivate","processMapToObjectValue","Array","isArray","map","v","targetMap","fromEntries","createDefault","has","get","noop","undefinedType","isIE","window","navigator","test","userAgent","logMethods","_loggersByName","defaultLogger","bindMethod","method","bind","Function","prototype","apply","arguments","traceForIE","trace","realMethod","replaceLoggingMethods","level","getLevel","methodFactory","debug","levels","SILENT","enableLoggingWhenConsoleArrives","defaultMethodFactory","_level","_loggerName","Logger","factory","inheritedLevel","defaultLevel","userLevel","self","storageKey","persistLevelIfPossible","levelNum","levelName","toUpperCase","localStorage","ignore","document","cookie","encodeURIComponent","getPersistedLevel","storedLevel","cookieName","location","indexOf","exec","clearPersistedLevel","removeItem","normalizeLevel","input","TypeError","persist","setDefaultLevel","resetLevel","enableAll","TRACE","disableAll","rebuild","childName","initialLevel","getLogger","_log","noConflict","getLoggers","retry","networkErrorMsgs","AbortError","originalError","stack","pRetry","options","reject","onFailedAttempt","retries","operation","attempt","async","attemptNumber","stop","errorMessage","retriesLeft","decorateErrorWithCounts","mainError","module","exports","RetryOperation","timeouts","forever","Infinity","unref","maxRetryTime","concat","factor","minTimeout","maxTimeout","randomize","createTimeout","sort","a","b","random","Math","timeout","round","max","pow","min","wrap","methods","original","op","callback","pop","_originalTimeouts","_timeouts","_options","_maxRetryTime","_fn","_errors","_attempts","_operationTimeout","_operationTimeoutCb","_timeout","_operationStart","_timer","_cachedTimeouts","reset","clearTimeout","currentTime","getTime","shift","splice","setTimeout","timeoutOps","cb","try","start","errors","attempts","counts","mainErrorCount","count","REPLACE_RE","RegExp","replace","replace_fn","match","r","t","defineProperty","enumerable","configurable","writable","toPrimitive","Symbol","Number","toPropertyKey","_typeof","o","iterator"],"sourceRoot":""}