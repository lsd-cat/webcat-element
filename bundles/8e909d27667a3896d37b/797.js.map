{"version":3,"file":"bundles/8e909d27667a3896d37b/797.js","mappings":"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","sources":["webpack://element-web/./src/async-components/views/dialogs/eventindex/ManageEventIndexDialog.tsx"],"sourcesContent":["/*\nCopyright 2024 New Vector Ltd.\nCopyright 2020, 2021 The Matrix.org Foundation C.I.C.\n\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\nPlease see LICENSE files in the repository root for full details.\n*/\n\nimport React, { type ChangeEvent } from \"react\";\nimport { type Room } from \"matrix-js-sdk/src/matrix\";\n\nimport { _t } from \"../../../../languageHandler\";\nimport SdkConfig from \"../../../../SdkConfig\";\nimport SettingsStore from \"../../../../settings/SettingsStore\";\nimport Modal from \"../../../../Modal\";\nimport { formatBytes, formatCountLong } from \"../../../../utils/FormattingUtils\";\nimport EventIndexPeg from \"../../../../indexing/EventIndexPeg\";\nimport { SettingLevel } from \"../../../../settings/SettingLevel\";\nimport Field from \"../../../../components/views/elements/Field\";\nimport BaseDialog from \"../../../../components/views/dialogs/BaseDialog\";\nimport DialogButtons from \"../../../../components/views/elements/DialogButtons\";\nimport { type IIndexStats } from \"../../../../indexing/BaseEventIndexManager\";\n\ninterface IProps {\n    onFinished(): void;\n}\n\ninterface IState {\n    eventIndexSize: number;\n    eventCount: number;\n    crawlingRoomsCount: number;\n    roomCount: number;\n    currentRoom: string | null;\n    crawlerSleepTime: number;\n}\n\n/*\n * Allows the user to introspect the event index state and disable it.\n */\nexport default class ManageEventIndexDialog extends React.Component<IProps, IState> {\n    public constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            eventIndexSize: 0,\n            eventCount: 0,\n            crawlingRoomsCount: 0,\n            roomCount: 0,\n            currentRoom: null,\n            crawlerSleepTime: SettingsStore.getValueAt(SettingLevel.DEVICE, \"crawlerSleepTime\"),\n        };\n    }\n\n    public updateCurrentRoom = async (room: Room): Promise<void> => {\n        const eventIndex = EventIndexPeg.get();\n        if (!eventIndex) return;\n        let stats: IIndexStats | undefined;\n\n        try {\n            stats = await eventIndex.getStats();\n        } catch {\n            // This call may fail if sporadically, not a huge issue as we will\n            // try later again and probably succeed.\n            return;\n        }\n\n        let currentRoom: string | null = null;\n\n        if (room) currentRoom = room.name;\n        const roomStats = eventIndex.crawlingRooms();\n        const crawlingRoomsCount = roomStats.crawlingRooms.size;\n        const roomCount = roomStats.totalRooms.size;\n\n        this.setState({\n            eventIndexSize: stats?.size ?? 0,\n            eventCount: stats?.eventCount ?? 0,\n            crawlingRoomsCount: crawlingRoomsCount,\n            roomCount: roomCount,\n            currentRoom: currentRoom,\n        });\n    };\n\n    public componentWillUnmount(): void {\n        const eventIndex = EventIndexPeg.get();\n\n        if (eventIndex !== null) {\n            eventIndex.removeListener(\"changedCheckpoint\", this.updateCurrentRoom);\n        }\n    }\n\n    public async componentDidMount(): Promise<void> {\n        let eventIndexSize = 0;\n        let crawlingRoomsCount = 0;\n        let roomCount = 0;\n        let eventCount = 0;\n        let currentRoom: string | null = null;\n\n        const eventIndex = EventIndexPeg.get();\n\n        if (eventIndex !== null) {\n            eventIndex.on(\"changedCheckpoint\", this.updateCurrentRoom);\n\n            try {\n                const stats = await eventIndex.getStats();\n                if (stats) {\n                    eventIndexSize = stats.size;\n                    eventCount = stats.eventCount;\n                }\n            } catch {\n                // This call may fail if sporadically, not a huge issue as we\n                // will try later again in the updateCurrentRoom call and\n                // probably succeed.\n            }\n\n            const roomStats = eventIndex.crawlingRooms();\n            crawlingRoomsCount = roomStats.crawlingRooms.size;\n            roomCount = roomStats.totalRooms.size;\n\n            const room = eventIndex.currentRoom();\n            if (room) currentRoom = room.name;\n        }\n\n        this.setState({\n            eventIndexSize,\n            eventCount,\n            crawlingRoomsCount,\n            roomCount,\n            currentRoom,\n        });\n    }\n\n    private onDisable = async (): Promise<void> => {\n        const DisableEventIndexDialog = (await import(\"./DisableEventIndexDialog\")).default;\n        Modal.createDialog(DisableEventIndexDialog, undefined, undefined, /* priority = */ false, /* static = */ true);\n    };\n\n    private onCrawlerSleepTimeChange = (e: ChangeEvent<HTMLInputElement>): void => {\n        this.setState({ crawlerSleepTime: parseInt(e.target.value, 10) });\n        SettingsStore.setValue(\"crawlerSleepTime\", null, SettingLevel.DEVICE, e.target.value);\n    };\n\n    public render(): React.ReactNode {\n        const brand = SdkConfig.get().brand;\n\n        let crawlerState;\n        if (this.state.currentRoom === null) {\n            crawlerState = _t(\"settings|security|message_search_indexing_idle\");\n        } else {\n            crawlerState = _t(\"settings|security|message_search_indexing\", { currentRoom: this.state.currentRoom });\n        }\n\n        const doneRooms = Math.max(0, this.state.roomCount - this.state.crawlingRoomsCount);\n\n        const eventIndexingSettings = (\n            <div>\n                {_t(\"settings|security|message_search_intro\", {\n                    brand,\n                })}\n                <div className=\"mx_SettingsTab_subsectionText\">\n                    {crawlerState}\n                    <br />\n                    {_t(\"settings|security|message_search_space_used\")} {formatBytes(this.state.eventIndexSize, 0)}\n                    <br />\n                    {_t(\"settings|security|message_search_indexed_messages\")} {formatCountLong(this.state.eventCount)}\n                    <br />\n                    {_t(\"settings|security|message_search_indexed_rooms\")}{\" \"}\n                    {_t(\"settings|security|message_search_room_progress\", {\n                        doneRooms: formatCountLong(doneRooms),\n                        totalRooms: formatCountLong(this.state.roomCount),\n                    })}{\" \"}\n                    <br />\n                    <Field\n                        label={_t(\"settings|security|message_search_sleep_time\")}\n                        type=\"number\"\n                        value={this.state.crawlerSleepTime.toString()}\n                        onChange={this.onCrawlerSleepTimeChange}\n                    />\n                </div>\n            </div>\n        );\n\n        return (\n            <BaseDialog\n                className=\"mx_ManageEventIndexDialog\"\n                onFinished={this.props.onFinished}\n                title={_t(\"settings|security|message_search_section\")}\n            >\n                {eventIndexingSettings}\n                <DialogButtons\n                    primaryButton={_t(\"action|done\")}\n                    onPrimaryButtonClick={this.props.onFinished}\n                    primaryButtonClass=\"primary\"\n                    cancelButton={_t(\"action|disable\")}\n                    onCancel={this.onDisable}\n                    cancelButtonClass=\"danger\"\n                />\n            </BaseDialog>\n        );\n    }\n}\n"],"names":["ManageEventIndexDialog","React","constructor","props","super","_defineProperty","async","_stats$size","_stats","_stats$eventCount","_stats2","eventIndex","EventIndexPeg","get","stats","getStats","currentRoom","room","name","roomStats","crawlingRooms","crawlingRoomsCount","size","roomCount","totalRooms","this","setState","eventIndexSize","eventCount","DisableEventIndexDialog","default","Modal","createDialog","undefined","e","crawlerSleepTime","parseInt","target","value","SettingsStore","setValue","SettingLevel","DEVICE","state","getValueAt","componentWillUnmount","removeListener","updateCurrentRoom","componentDidMount","on","render","brand","SdkConfig","crawlerState","_t","doneRooms","Math","max","eventIndexingSettings","className","formatBytes","formatCountLong","Field","label","type","toString","onChange","onCrawlerSleepTimeChange","BaseDialog","onFinished","title","DialogButtons","primaryButton","onPrimaryButtonClick","primaryButtonClass","cancelButton","onCancel","onDisable","cancelButtonClass"],"sourceRoot":""}